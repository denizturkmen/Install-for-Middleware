{
	"info": {
		"_postman_id": "de0f78ed-f701-49eb-b791-eb9afbb2d641",
		"name": "Hashicorp Vault",
		"description": "A collection for Hashicorp Vault use cases and demo examples\n\nAPI Reference for all calls can be found at [https://developer.hashicorp.com/vault/api-docs](https://developer.hashicorp.com/vault/api-docs)\n\n[Learn](https://developer.hashicorp.com/vault/api-docsLearn) more about Vault at [https://learn.hashicorp.com/vault](https://learn.hashicorp.com/vault)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "36224015",
		"_collection_link": "https://www.postman.com/waffle-lab/workspace/hashicorp/collection/2775488-de0f78ed-f701-49eb-b791-eb9afbb2d641?action=share&source=collection_link&creator=36224015"
	},
	"item": [
		{
			"name": "Management",
			"item": [
				{
					"name": "Audit",
					"item": [
						{
							"name": "Get System Audit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/audit"
							},
							"response": []
						},
						{
							"name": "Get Auth Providers",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/auth"
							},
							"response": []
						},
						{
							"name": "Get Policy List",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{VAULT_ADDRESS}}/v1/sys/policies/acl?list=true",
									"host": [
										"{{VAULT_ADDRESS}}"
									],
									"path": [
										"v1",
										"sys",
										"policies",
										"acl"
									],
									"query": [
										{
											"key": "list",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Version History",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/version-history"
							},
							"response": []
						}
					]
				},
				{
					"name": "Counters",
					"item": [
						{
							"name": "Get Entities Count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/internal/counters/entities"
							},
							"response": []
						},
						{
							"name": "Get Tokens Count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/internal/counters/tokens"
							},
							"response": []
						},
						{
							"name": "Get All Activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/internal/counters/activity"
							},
							"response": []
						},
						{
							"name": "Get Partial Month Client Count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/internal/counters/activity/monthly"
							},
							"response": []
						},
						{
							"name": "Export Activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/internal/counters/activity/export"
							},
							"response": []
						}
					]
				},
				{
					"name": "Seal/Unseal",
					"item": [
						{
							"name": "Get Seal Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/seal-status"
							},
							"response": []
						},
						{
							"name": "Seal Vault",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/seal"
							},
							"response": []
						},
						{
							"name": "Unseal Vault",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(200);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Vault-Namespace",
										"value": "root",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"{{UNSEAL_KEY_VALUE}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/unseal"
							},
							"response": [
								{
									"name": "Unseal Vault",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"key\": \"{{UNSEAL_KEY_1}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/unseal"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-store"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains"
										},
										{
											"key": "Date",
											"value": "Wed, 24 Aug 2022 01:08:04 GMT"
										},
										{
											"key": "Content-Length",
											"value": "244"
										}
									],
									"cookie": [],
									"body": "{\n    \"type\": \"shamir\",\n    \"initialized\": true,\n    \"sealed\": true,\n    \"t\": 3,\n    \"n\": 5,\n    \"progress\": 1,\n    \"nonce\": \"a041960e-ccf0-23f5-6780-2f1a657184ac\",\n    \"version\": \"1.11.1+ent\",\n    \"build_date\": \"2022-07-20T09:13:55Z\",\n    \"migration\": false,\n    \"recovery_seal\": false,\n    \"storage_type\": \"file\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Raft",
					"item": [
						{
							"name": "Read Raft Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/storage/raft/configuration"
							},
							"response": []
						}
					]
				},
				{
					"name": "Get OpenAPi Docs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Vault-Token",
								"value": "{{VAULT_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": "{{VAULT_ADDRESS}}/v1/sys/internal/specs/openapi"
					},
					"response": []
				},
				{
					"name": "Get Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"var moment = require('moment');\r",
									"\r",
									"\r",
									"pm.test(\"Vault Node Responding\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Vault Node unsealed and standby or is offline\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([429]);\r",
									"});\r",
									"\r",
									"pm.test(\"Vault Node disaster recovery mode replication secondary and active\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([472]);\r",
									"});\r",
									"\r",
									"//Check for Unsealed Status\r",
									"pm.test(\"Vault Unsealed\", () => { \r",
									"    pm.expect(pm.response.json().sealed).to.equal(false); \r",
									"});\r",
									"\r",
									"//Confirm Version of Vault\r",
									"pm.test(\"Vault Version at v1.11.1\", () => { \r",
									"    pm.expect(pm.response.json().version).to.equal(\"1.11.1+ent\"); \r",
									"});\r",
									"\r",
									"//Vault License Check\r",
									"pm.test(\"License NOT Within 3 months of expiration\", () => {\r",
									"    var days = (-90)\r",
									"    dateExpiration = moment().diff((pm.response.json().license.expiry_time), 'days');\r",
									"    console.log(\"Days till license expiration: \" + dateExpiration);\r",
									"    pm.expect(dateExpiration).to.be.lessThan(days);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": "{{VAULT_ADDRESS}}/v1/sys/health",
						"description": "[Vault API Health Reference](https://www.vaultproject.io/api-docs/system/health)"
					},
					"response": [
						{
							"name": "Get Health",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/health"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Date",
									"value": "Fri, 26 Aug 2022 00:47:48 GMT"
								},
								{
									"key": "Content-Length",
									"value": "388"
								}
							],
							"cookie": [],
							"body": "{\n    \"initialized\": true,\n    \"sealed\": false,\n    \"standby\": false,\n    \"performance_standby\": false,\n    \"replication_performance_mode\": \"disabled\",\n    \"replication_dr_mode\": \"disabled\",\n    \"server_time_utc\": 1661474868,\n    \"version\": \"1.11.1+ent\",\n    \"cluster_name\": \"vault-cluster-55997af8\",\n    \"cluster_id\": \"dc1a9cc8-bc1f-f4fc-08a2-72928cc07af8\",\n    \"license\": {\n        \"state\": \"autoloaded\",\n        \"expiry_time\": \"2023-06-06T00:00:00Z\",\n        \"terminated\": false\n    }\n}"
						}
					]
				},
				{
					"name": "Get License Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Vault-Token",
								"value": "{{VAULT_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{VAULT_ADDRESS}}/v1/sys/license/status"
					},
					"response": []
				}
			]
		},
		{
			"name": "Secrets Engines",
			"item": [
				{
					"name": "List and Configure",
					"item": [
						{
							"name": "List",
							"item": [
								{
									"name": "List all Mounts",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts"
									},
									"response": []
								},
								{
									"name": "List all Mounts",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"url": "{{VAULT_ADDRESS}}/v1/sys/internal/ui/mounts"
									},
									"response": []
								},
								{
									"name": "List Information by Mount Path",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/{{MOUNT_PATH}}"
									},
									"response": []
								}
							]
						},
						{
							"name": "Create",
							"item": [
								{
									"name": "List Engines/Plugins",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "type",
													"value": "database",
													"type": "text"
												}
											]
										},
										"url": "{{VAULT_ADDRESS}}/v1//sys/plugins/catalog",
										"description": "Engine Options\n\n1.  database"
									},
									"response": []
								},
								{
									"name": "Enable Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "type",
													"value": "database",
													"type": "text"
												}
											]
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/{{MOUNT_PATH}}",
										"description": "Engine Options\n\n1.  database"
									},
									"response": []
								},
								{
									"name": "Create Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"allowed_roles\": [\r\n        \"readonly\",\r\n        \"demo-readonly-role\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/{{MOUNT_PATH}}/config/{{MOUNT_ROLE}}",
										"description": "Engine Options\n\n1.  database"
									},
									"response": []
								},
								{
									"name": "Configure Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"plugin_name\": \"postgresql-database-plugin\",\r\n  \"connection_url\": \"postgresql://{{username}}:{{password}}@postgres-demo/postgres?sslmode=disable\",\r\n  \"allowed_roles\": \"readonly\",\r\n  \"username\": \"postgres\",\r\n  \"password\": \"postgres\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/{{MOUNT_PATH}}/config/{{MOUNT_ROLE}}"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Read/Use",
					"item": [
						{
							"name": "Request Credentials",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": "{{VAULT_ADDRESS}}/v1/{{MOUNT_PATH}}/creds/{{MOUNT_ROLE}}"
							},
							"response": []
						},
						{
							"name": "Rotate Static Credentials Manually",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(204);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/{{MOUNT_PATH}}/rotate-role/{{MOUNT_ROLE}}"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Use Cases",
			"item": [
				{
					"name": "Auth Engines",
					"item": [
						{
							"name": "GitHub Authentication",
							"item": [
								{
									"name": "Enable Auth and Policy",
									"item": [
										{
											"name": "Enable GitHub Authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"path\": \"github\",\r\n    \"type\": \"github\",\r\n    \"config\": {}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/auth/github"
											},
											"response": []
										},
										{
											"name": "Configure GitHub Authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"organization\": \"{{VAULT_GITHUB_ORG}}\",\r\n    \"organization_id\": {{VAULT_GITHUB_ORG_ID}},\r\n    \"token_explicit_max_ttl\": 0,\r\n    \"token_max_ttl\": 0,\r\n    \"token_no_default_policy\": false,\r\n    \"token_num_uses\": 1,\r\n    \"token_period\": 300,\r\n    \"token_ttl\": 0,\r\n    \"token_type\": \"default\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/auth/github/config"
											},
											"response": []
										},
										{
											"name": "Create Github Access Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"github_policy\",\r\n    \"policy\": \"path \\\"user/data/{{identity.entity.name}}/*\\\" {\\n  capabilities = [\\\"create\\\", \\\"update\\\", \\\"read\\\", \\\"delete\\\", \\\"list\\\"]\\n}\\n\\npath \\\"group/data/{{identity.groups.names.mytestgroup.name}}/*\\\" {\\n  capabilities = [\\\"create\\\", \\\"update\\\", \\\"read\\\", \\\"delete\\\", \\\"list\\\"]\\n}\\n\\npath \\\"group/{{identity.groups.names.mytestgroup.name}}/woot\\\" {\\n  capabilities = [\\\"create\\\", \\\"update\\\", \\\"read\\\", \\\"delete\\\", \\\"list\\\"]\\n}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/github_policy"
											},
											"response": []
										},
										{
											"name": "List Token Accessors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "LIST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/auth/token/accessors"
											},
											"response": []
										}
									]
								},
								{
									"name": "Login and Test",
									"item": [
										{
											"name": "Login Auth via Github Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.environment.set(\"client_token\", jsonData.auth.client_token);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"token\": \"{{github_token}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/auth/github/login"
											},
											"response": []
										}
									]
								},
								{
									"name": "Clean Up",
									"item": [
										{
											"name": "Disable GitHub Authentication Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/auth/github"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Userpass Authentication",
							"item": [
								{
									"name": "Enable Auth and Policy",
									"item": [
										{
											"name": "Enable Userpass Authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"path\": \"userpass\",\r\n    \"type\": \"userpass\",\r\n    \"config\": {}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/auth/userpass"
											},
											"response": []
										},
										{
											"name": "Enable Userpass Authentication Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"path\": \"userpass\",\r\n    \"type\": \"userpass\",\r\n    \"config\": {}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/auth/userpass"
											},
											"response": []
										},
										{
											"name": "Create Userpass Account",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"password\": \"{{VAULT_USERPASS_PASSWORD}}\",\r\n    \"token_explicit_max_ttl\": \"900s\",\r\n    \"token_num_uses\": 1,\r\n    \"token_policies\":[\r\n        \"userpass_admin_policy\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/auth/userpass/users/{{VAULT_USERPASS_USERNAME}}"
											},
											"response": []
										},
										{
											"name": "Create Userpass Admin Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"policy\": \"path \\\"mySecretKeys/data/*\\\" {\\n  capabilities = [ \\\"read\\\" ]\\n}\\npath \\\"database/creds/*\\\" {\\n  capabilities = [ \\\"read\\\" ]\\n}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/userpass_admin_policy"
											},
											"response": []
										}
									]
								},
								{
									"name": "Login and Test",
									"item": [
										{
											"name": "Login with Userpass Authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.environment.set(\"VAULT_USERPASS_TOKEN\", jsonData.auth.client_token);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"password\": \"{{VAULT_USERPASS_PASSWORD}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/auth/userpass/login/{{VAULT_USERPASS_USERNAME}}"
											},
											"response": []
										},
										{
											"name": "Read Key Value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.environment.set(\"output_from_Vault\", jsonData.data.data.code);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_USERPASS_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": "{{VAULT_ADDRESS}}/v1/mySecretKeys/data/{{VAULT_KV_PATH}}"
											},
											"response": []
										}
									]
								},
								{
									"name": "Clean Up",
									"item": [
										{
											"name": "Delete Userpass Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/userpass_admin_policy"
											},
											"response": []
										},
										{
											"name": "Disable Userpass Authentication Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/auth/userpass"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Azure Authentication (Draft)",
							"item": [
								{
									"name": "Enable Azure Authentication",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"path\": \"azure\",\r\n    \"type\": \"azure\",\r\n    \"config\": {}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/auth/azure"
									},
									"response": []
								},
								{
									"name": "Configure Azure Authentication",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"azure\",\r\n    \"tenant_id\": \"{{AZURE_TENANT_ID}}\",\r\n    \"resource\": \"https://management.azure.com/\",\r\n    \"client_id\": \"{{AZURE_CLIENT_ID}}\",\r\n    \"client_secret\": \"{{AZURE_CLIENT_SECRET}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/auth/azure/config"
									},
									"response": []
								},
								{
									"name": "Read Azure Config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/auth/azure/config"
									},
									"response": []
								},
								{
									"name": "Create Azure Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"token_policies\": [\"database_read\"],\r\n  \"max_ttl\": 1800000,\r\n  \"max_jwt_exp\": 10000,\r\n  \"bound_subscription_ids\": [\"{{AZURE_SUBSCRIPTION_ID}}\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/auth/azure/role/dev",
										"description": "API Reference  \n[https://developer.hashicorp.com/vault/api-docs/auth/azure](https://developer.hashicorp.com/vault/api-docs/auth/azure)"
									},
									"response": []
								},
								{
									"name": "List All Azure Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "LIST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/auth/azure/role"
									},
									"response": []
								},
								{
									"name": "Read Specific Azure Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"azure\",\r\n    \"tenant_id\": \"{{AZURE_TENANT_ID}}\",\r\n    \"resource\": \"{{AZURE_RESOURCE_URL}}\",\r\n    \"client_id\": \"{{AZURE_CLIENT_ID}}\",\r\n    \"client_secret\": \"{{AZURE_CLIENT_SECRET}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/auth/azure/role/dev"
									},
									"response": []
								},
								{
									"name": "Delete Specific Azure Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"azure\",\r\n    \"tenant_id\": \"{{AZURE_TENANT_ID}}\",\r\n    \"resource\": \"{{AZURE_RESOURCE_URL}}\",\r\n    \"client_id\": \"{{AZURE_CLIENT_ID}}\",\r\n    \"client_secret\": \"{{AZURE_CLIENT_SECRET}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/auth/azure/role/dev"
									},
									"response": []
								},
								{
									"name": "Login Auth via Azure",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.environment.set(\"client_token\", jsonData.auth.client_token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"role\": \"dev\",\r\n    \"jwt\" : \"\",\r\n    \"subscription_id\": \"\",\r\n    \"resource_group_name\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/auth/azure/login"
									},
									"response": []
								},
								{
									"name": "Disable Azure Authentication Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/auth/azure"
									},
									"response": []
								}
							]
						},
						{
							"name": "AppRole Authentication",
							"item": [
								{
									"name": "Enable Auth and Policy",
									"item": [
										{
											"name": "Enable AppRole Authentication Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"path\": \"approle\",\r\n    \"type\": \"approle\",\r\n    \"config\": {}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/auth/approle"
											},
											"response": []
										},
										{
											"name": "Create AppRole Access Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"policy\": \"# Read-only permission on secrets stored at 'mySecretKeys/data/postgres_db_admin'\\npath \\\"mySecretKeys/data/postgres_db_admin\\\" {\\n  capabilities = [ \\\"read\\\" ]\\n}\\n\\n# Read-only permission on secrets stored at 'database/creds/readonly'\\npath \\\"database/creds/readonly\\\" {\\n  capabilities = [ \\\"read\\\" ]\\n}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/:policy_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"policies",
														"acl",
														":policy_name"
													],
													"variable": [
														{
															"key": "policy_name",
															"value": "pipeline_policy"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Pipelines ACL Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/:policy_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"policies",
														"acl",
														":policy_name"
													],
													"variable": [
														{
															"key": "policy_name",
															"value": "pipeline_policy"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Configure App Roles",
									"item": [
										{
											"name": "Dynamic Database Engine Role",
											"item": [
												{
													"name": "Get & Assign Role and Secret ID Variables",
													"item": [
														{
															"name": "Configure AppRole Role for readonly database entry",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Execution Successful\", function () {\r",
																			"\r",
																			"    try {\r",
																			"\r",
																			"        pm.response.to.have.status(204);\r",
																			"\r",
																			"    } catch (e) {\r",
																			"\r",
																			"        console.log(e)\r",
																			"\r",
																			"        throw Error(e)\r",
																			"\r",
																			"    }\r",
																			"\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-Vault-Token",
																		"value": "{{VAULT_TOKEN}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"token_ttl\": \"15m\",\r\n  \"token_max_ttl\": \"30m\",\r\n  \"token_policies\": \"pipeline_policy\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{VAULT_ADDRESS}}/v1/auth/approle/role/:role_name",
																	"host": [
																		"{{VAULT_ADDRESS}}"
																	],
																	"path": [
																		"v1",
																		"auth",
																		"approle",
																		"role",
																		":role_name"
																	],
																	"variable": [
																		{
																			"key": "role_name",
																			"value": "dynamic_postgres_db_admin"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Get AppRole Role Config for dynamic_postgres_db_admin",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Execution Successful\", function () {\r",
																			"\r",
																			"    try {\r",
																			"\r",
																			"        pm.response.to.have.status(200);\r",
																			"\r",
																			"    } catch (e) {\r",
																			"\r",
																			"        console.log(e)\r",
																			"\r",
																			"        throw Error(e)\r",
																			"\r",
																			"    }\r",
																			"\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-Vault-Token",
																		"value": "{{VAULT_TOKEN}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{VAULT_ADDRESS}}/v1/auth/approle/role/:role_name",
																	"host": [
																		"{{VAULT_ADDRESS}}"
																	],
																	"path": [
																		"v1",
																		"auth",
																		"approle",
																		"role",
																		":role_name"
																	],
																	"variable": [
																		{
																			"key": "role_name",
																			"value": "dynamic_postgres_db_admin"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Log In and Test",
													"item": [
														{
															"name": "Get AppRole Role-ID for dynamic_postgres_db_admin",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Execution Successful\", function () {\r",
																			"\r",
																			"    try {\r",
																			"\r",
																			"        pm.response.to.have.status(200);\r",
																			"\r",
																			"    } catch (e) {\r",
																			"\r",
																			"        console.log(e)\r",
																			"\r",
																			"        throw Error(e)\r",
																			"\r",
																			"    }\r",
																			"\r",
																			"});\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"pm.environment.set(\"VAULT_APPROLE_ID\", jsonData.data.role_id);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-Vault-Token",
																		"value": "{{VAULT_TOKEN}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{VAULT_ADDRESS}}/v1/auth/approle/role/:role_name/role-id",
																	"host": [
																		"{{VAULT_ADDRESS}}"
																	],
																	"path": [
																		"v1",
																		"auth",
																		"approle",
																		"role",
																		":role_name",
																		"role-id"
																	],
																	"variable": [
																		{
																			"key": "role_name",
																			"value": "dynamic_postgres_db_admin"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Get AppRole Secret-ID for dynamic_postgres_db_admin",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Execution Successful\", function () {\r",
																			"\r",
																			"    try {\r",
																			"\r",
																			"        pm.response.to.have.status(200);\r",
																			"\r",
																			"    } catch (e) {\r",
																			"\r",
																			"        console.log(e)\r",
																			"\r",
																			"        throw Error(e)\r",
																			"\r",
																			"    }\r",
																			"\r",
																			"});\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"pm.environment.set(\"VAULT_APPROLE_SECRET_ID\", jsonData.data.secret_id);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-Vault-Token",
																		"value": "{{VAULT_TOKEN}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{VAULT_ADDRESS}}/v1/auth/approle/role/:role_name/secret-id",
																	"host": [
																		"{{VAULT_ADDRESS}}"
																	],
																	"path": [
																		"v1",
																		"auth",
																		"approle",
																		"role",
																		":role_name",
																		"secret-id"
																	],
																	"variable": [
																		{
																			"key": "role_name",
																			"value": "dynamic_postgres_db_admin"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Attain AppRole Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Execution Successful\", function () {\r",
																			"\r",
																			"    try {\r",
																			"\r",
																			"        pm.response.to.have.status(200);\r",
																			"\r",
																			"    } catch (e) {\r",
																			"\r",
																			"        console.log(e)\r",
																			"\r",
																			"        throw Error(e)\r",
																			"\r",
																			"    }\r",
																			"\r",
																			"});\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"pm.environment.set(\"VAULT_APPROLE_CLIENT_TOKEN\", jsonData.auth.client_token);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"role_id\": \"{{VAULT_APPROLE_ID}}\",\r\n  \"secret_id\": \"{{VAULT_APPROLE_SECRET_ID}}\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": "{{VAULT_ADDRESS}}/v1/auth/approle/login"
															},
															"response": []
														},
														{
															"name": "Request Dynamic Credentials",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"pm.environment.set(\"vault_dynamic_credential_username\", jsonData.data.username);\r",
																			"pm.environment.set(\"vault_dynamic_credential_password\", jsonData.data.password);\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-Vault-Token",
																		"value": "{{VAULT_APPROLE_CLIENT_TOKEN}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": []
																},
																"url": {
																	"raw": "{{VAULT_ADDRESS}}/v1/:secret_path/creds/:secret_name",
																	"host": [
																		"{{VAULT_ADDRESS}}"
																	],
																	"path": [
																		"v1",
																		":secret_path",
																		"creds",
																		":secret_name"
																	],
																	"variable": [
																		{
																			"key": "secret_path",
																			"value": "database"
																		},
																		{
																			"key": "secret_name",
																			"value": "readonly"
																		}
																	]
																}
															},
															"response": []
														}
													]
												}
											],
											"description": "**Pre-Requisites**\n\n- Configure the Database Engine for postgres located in this collection"
										},
										{
											"name": "Static Database KV Engine Role",
											"item": [
												{
													"name": "Get & Assign Role and Secret ID Variables",
													"item": [
														{
															"name": "Configure AppRole Role for KV static postgres_db_admin entry",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Execution Successful\", function () {\r",
																			"\r",
																			"    try {\r",
																			"\r",
																			"        pm.response.to.have.status(204);\r",
																			"\r",
																			"    } catch (e) {\r",
																			"\r",
																			"        console.log(e)\r",
																			"\r",
																			"        throw Error(e)\r",
																			"\r",
																			"    }\r",
																			"\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-Vault-Token",
																		"value": "{{VAULT_TOKEN}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"token_ttl\": \"15m\",\r\n  \"token_max_ttl\": \"30m\",\r\n  \"token_policies\": \"pipeline_policy\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{VAULT_ADDRESS}}/v1/auth/approle/role/:role_name",
																	"host": [
																		"{{VAULT_ADDRESS}}"
																	],
																	"path": [
																		"v1",
																		"auth",
																		"approle",
																		"role",
																		":role_name"
																	],
																	"variable": [
																		{
																			"key": "role_name",
																			"value": "postgres_db_admin"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Get AppRole Secret-ID for postgres_db_admin",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Execution Successful\", function () {\r",
																			"\r",
																			"    try {\r",
																			"\r",
																			"        pm.response.to.have.status(200);\r",
																			"\r",
																			"    } catch (e) {\r",
																			"\r",
																			"        console.log(e)\r",
																			"\r",
																			"        throw Error(e)\r",
																			"\r",
																			"    }\r",
																			"\r",
																			"});\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"pm.environment.set(\"VAULT_APPROLE_SECRET_ID\", jsonData.data.secret_id);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-Vault-Token",
																		"value": "{{VAULT_TOKEN}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{VAULT_ADDRESS}}/v1/auth/approle/role/:role_name/secret-id",
																	"host": [
																		"{{VAULT_ADDRESS}}"
																	],
																	"path": [
																		"v1",
																		"auth",
																		"approle",
																		"role",
																		":role_name",
																		"secret-id"
																	],
																	"variable": [
																		{
																			"key": "role_name",
																			"value": "postgres_db_admin"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Get AppRole Role Config for postgres_db_admin",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Execution Successful\", function () {\r",
																			"\r",
																			"    try {\r",
																			"\r",
																			"        pm.response.to.have.status(200);\r",
																			"\r",
																			"    } catch (e) {\r",
																			"\r",
																			"        console.log(e)\r",
																			"\r",
																			"        throw Error(e)\r",
																			"\r",
																			"    }\r",
																			"\r",
																			"});\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"pm.environment.set(\"VAULT_APPROLE_ID\", jsonData.data.role_id);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-Vault-Token",
																		"value": "{{VAULT_TOKEN}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{VAULT_ADDRESS}}/v1/auth/approle/role/:role_id/role-id",
																	"host": [
																		"{{VAULT_ADDRESS}}"
																	],
																	"path": [
																		"v1",
																		"auth",
																		"approle",
																		"role",
																		":role_id",
																		"role-id"
																	],
																	"variable": [
																		{
																			"key": "role_id",
																			"value": "postgres_db_admin"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Log In and Test",
													"item": [
														{
															"name": "Attain AppRole Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Execution Successful\", function () {\r",
																			"\r",
																			"    try {\r",
																			"\r",
																			"        pm.response.to.have.status(200);\r",
																			"\r",
																			"    } catch (e) {\r",
																			"\r",
																			"        console.log(e)\r",
																			"\r",
																			"        throw Error(e)\r",
																			"\r",
																			"    }\r",
																			"\r",
																			"});\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"pm.environment.set(\"VAULT_APPROLE_CLIENT_TOKEN\", jsonData.auth.client_token);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"role_id\": \"{{VAULT_APPROLE_ID}}\",\r\n  \"secret_id\": \"{{VAULT_APPROLE_SECRET_ID}}\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": "{{VAULT_ADDRESS}}/v1/auth/approle/login"
															},
															"response": []
														},
														{
															"name": "Read Key Value",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"pm.environment.set(\"output_from_Vault\", jsonData.data.data.code);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-Vault-Token",
																		"value": "{{VAULT_APPROLE_CLIENT_TOKEN}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": []
																},
																"url": {
																	"raw": "{{VAULT_ADDRESS}}/v1/:secret_path/data/:secret_name",
																	"host": [
																		"{{VAULT_ADDRESS}}"
																	],
																	"path": [
																		"v1",
																		":secret_path",
																		"data",
																		":secret_name"
																	],
																	"variable": [
																		{
																			"key": "secret_path",
																			"value": "mySecretKeys"
																		},
																		{
																			"key": "secret_name",
																			"value": "postgres_db_admin"
																		}
																	]
																}
															},
															"response": []
														}
													]
												}
											],
											"description": "**Pre-Requisites**\n\n- Configure the Key Value Engine located in this collection"
										}
									]
								},
								{
									"name": "Clean Up",
									"item": [
										{
											"name": "Delete ACL Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/:policy_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"policies",
														"acl",
														":policy_name"
													],
													"variable": [
														{
															"key": "policy_name",
															"value": "pipeline_policy"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Disable AppRole Authentication Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/auth/approle"
											},
											"response": []
										}
									]
								}
							],
							"description": "## Pre-Requisites\n\nExecute the Use Cases for the Key Value Engine and Database Engine for postgres (dynamic option specifically) prior to executing this use case, as some blocks will call other engines created by them\n\n[Learn Reference Material](https://learn.hashicorp.com/tutorials/vault/approle?in=vault/auth-methods)"
						},
						{
							"name": "OIDC Providers",
							"item": [
								{
									"name": "Azure AD",
									"item": [
										{
											"name": "Pre-Requisites - Create Azure App Registration",
											"item": [
												{
													"name": "Authorize",
													"item": [
														{
															"name": "Get Azure User Bearer Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"pm.environment.set(\"AZURE_BEARER_TOKEN\", jsonData.access_token);\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "client_id",
																			"value": "{{AZURE_CLIENT_ID}}",
																			"type": "text"
																		},
																		{
																			"key": "client_secret",
																			"value": "{{AZURE_CLIENT_SECRET}}",
																			"type": "text"
																		},
																		{
																			"key": "grant_type",
																			"value": "client_credentials",
																			"type": "text"
																		},
																		{
																			"key": "scope",
																			"value": "https://graph.microsoft.com/.default",
																			"type": "text"
																		},
																		{
																			"key": "resource",
																			"value": "https://management.azure.com/",
																			"type": "text",
																			"disabled": true
																		}
																	]
																},
																"url": "https://login.microsoftonline.com/{{AZURE_TENANT_ID}}/oauth2/v2.0/token"
															},
															"response": []
														}
													]
												},
												{
													"name": "App Registration",
													"item": [
														{
															"name": "Create App Registration",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"pm.environment.set(\"AZURE_OIDC_OBJECT_ID\", jsonData.id);\r",
																			"pm.environment.set(\"AZURE_OIDC_APPLICATION_ID\", jsonData.appId);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"displayName\": \"bmiller-demo-vault\",\r\n    \"spa\": {\r\n        \"redirectUris\": []\r\n    },\r\n    \"publicClient\": {\r\n        \"redirectUris\": []\r\n    },\r\n    \"web\": {\r\n        \"redirectUris\": [\r\n            \"http://localhost:8250/oidc/callback\",\r\n            \"http://localhost:8200/ui/vault/auth/oidc/oidc/callback\"\r\n        ]\r\n    },\r\n    \"signInAudience\": \"AzureADMyOrg\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": "https://graph.microsoft.com/v1.0/myorganization/applications"
															},
															"response": []
														},
														{
															"name": "Add Group Claims",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Prefer",
																		"value": "return-content",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"signInAudience\": \"AzureADMyOrg\",\r\n    \"groupMembershipClaims\": \"SecurityGroup\",\r\n    \"optionalClaims\": {\r\n        \"idToken\": [\r\n            {\r\n                \"additionalProperties\": [],\r\n                \"essential\": false,\r\n                \"name\": \"groups\",\r\n                \"source\": null\r\n            }\r\n        ],\r\n        \"accessToken\": [\r\n            {\r\n                \"additionalProperties\": [],\r\n                \"essential\": false,\r\n                \"name\": \"groups\",\r\n                \"source\": null\r\n            }\r\n        ],\r\n        \"saml2Token\": [\r\n            {\r\n                \"additionalProperties\": [],\r\n                \"essential\": false,\r\n                \"name\": \"groups\",\r\n                \"source\": null\r\n            }\r\n        ]\r\n    }\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": "https://graph.microsoft.com/v1.0/applications/{{AZURE_OIDC_OBJECT_ID}}"
															},
															"response": []
														},
														{
															"name": "Add Graph API Permissions",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Prefer",
																		"value": "return-content",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"requiredResourceAccess\": [\r\n        {\r\n            \"resourceAppId\": \"00000003-0000-0000-c000-000000000000\",\r\n            \"resourceAccess\": [\r\n                {\r\n                    \"id\": \"5f8c59db-677d-491f-a6b8-5f174b11ec1d\",\r\n                    \"type\": \"Scope\"\r\n                },\r\n                {\r\n                    \"id\": \"bc024368-1153-4739-b217-4326f2e966d0\",\r\n                    \"type\": \"Scope\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": "https://graph.microsoft.com/v1.0/applications/{{AZURE_OIDC_OBJECT_ID}}"
															},
															"response": []
														},
														{
															"name": "Generate App Secret",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"pm.environment.set(\"AZURE_OIDC_CLIENT_SECRET\", jsonData.secretText);\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"passwordCredential\": {\r\n        \"displayName\": \"demo-secret\",\r\n        \"startDateTime\": \"{{currentDate-raw}}\"\r\n    }\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": "https://graph.microsoft.com/v1.0/myorganization/applications/{{AZURE_OIDC_OBJECT_ID}}/addPassword"
															},
															"response": []
														},
														{
															"name": "Get App Registration",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": {
																		"token": "{{AZURE_BEARER_TOKEN}}"
																	}
																},
																"method": "GET",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": "https://graph.microsoft.com/v1.0/applications/{{AZURE_OIDC_OBJECT_ID}}"
															},
															"response": []
														}
													]
												},
												{
													"name": "Security Group",
													"item": [
														{
															"name": "Create Security Group",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"pm.environment.set(\"AZURE_SECURITYGROUP_ID\", jsonData.id);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": {
																		"token": "{{AZURE_BEARER_TOKEN}}"
																	}
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"displayName\": \"postman-demo-vault-sg{{$randomInt}}\",\r\n    \"mailEnabled\": false,\r\n    \"mailNickname\": \"postman-demo-vault-sg-mail{{$randomInt}}\",\r\n    \"securityEnabled\": true,\r\n    \"description\": \"Temp Group for AzureAD OIDC for Hashicorp Vault via Postman - Don't forget to clean up!\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": "https://graph.microsoft.com/beta/groups"
															},
															"response": []
														}
													]
												}
											],
											"auth": {
												"type": "bearer",
												"bearer": {
													"token": "{{AZURE_BEARER_TOKEN}}"
												}
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Enable Auth and Policy",
											"item": [
												{
													"name": "Enable Azure AD OIDC Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"path\": \"oidc\",\r\n    \"type\": \"oidc\",\r\n    \"config\": {}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{VAULT_ADDRESS}}/v1/sys/auth/oidc"
													},
													"response": []
												},
												{
													"name": "Get Azure AD OIDC Auth Settings",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"pm.environment.set(\"VAULT_AZUREAD_OIDC_ACCESSOR\", jsonData.accessor);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{VAULT_ADDRESS}}/v1/sys/auth/oidc"
													},
													"response": []
												},
												{
													"name": "Configure Azure AD OIDC Authentication",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"oidc\",\r\n    \"oidc_client_id\": \"{{AZURE_OIDC_APPLICATION_ID}}\",\r\n    \"oidc_client_secret\": \"{{AZURE_OIDC_CLIENT_SECRET}}\",\r\n    \"oidc_discovery_url\": \"https://login.microsoftonline.com/{{AZURE_TENANT_ID}}/v2.0\",\r\n    \"default_role\": \"azure_ad_default\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{VAULT_ADDRESS}}/v1/auth/oidc/config"
													},
													"response": []
												},
												{
													"name": "Get Azure AD Auth OIDC Config",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{VAULT_ADDRESS}}/v1/auth/oidc/config"
													},
													"response": []
												},
												{
													"name": "Create Azure AD Access Policy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"azure_ad_default\",\r\n    \"policy\": \"# Read-only permission on secrets stored at 'mySecretKeys/data/*'\\npath \\\"mySecretKeys/data/*\\\" {\\n  capabilities = [ \\\"read\\\" ]\\n}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/azure_ad_default",
														"description": "The options>cas is a counter which will need to be incremented with new versions"
													},
													"response": []
												},
												{
													"name": "Get Azure AD ACL Policy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/azure_ad_default"
													},
													"response": []
												}
											]
										},
										{
											"name": "Configure Roles",
											"item": [
												{
													"name": "Configure Default Azure AD Role",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"role_type\": \"oidc\",\r\n    \"user_claim\": \"email\",\r\n    \"groups_claim\": \"groups\",\r\n    \"allowed_redirect_uris\": [\r\n        \"http://localhost:8250/oidc/callback\",\r\n        \"http://localhost:8200/ui/vault/auth/oidc/oidc/callback\"\r\n    ],\r\n    \"oidc_scopes\": \"https://graph.microsoft.com/.default\",\r\n    \"policies\": [\r\n        \"azure_ad_default\",\r\n        \"default\"\r\n    ],\r\n    \"token_ttl\": 30,\r\n    \"token_num_uses\": 0\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{VAULT_ADDRESS}}/v1/auth/oidc/role/:role_name",
															"host": [
																"{{VAULT_ADDRESS}}"
															],
															"path": [
																"v1",
																"auth",
																"oidc",
																"role",
																":role_name"
															],
															"variable": [
																{
																	"key": "role_name",
																	"value": "azure_ad_default"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Azure AD Role Config for read-only",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(200);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{VAULT_ADDRESS}}/v1/auth/oidc/role/:role_name",
															"host": [
																"{{VAULT_ADDRESS}}"
															],
															"path": [
																"v1",
																"auth",
																"oidc",
																"role",
																":role_name"
															],
															"variable": [
																{
																	"key": "role_name",
																	"value": "azure_ad_default"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Group Creation and Assignment",
											"item": [
												{
													"name": "Create Vault External Group",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"pm.environment.set(\"VAULT_EXTERNALGROUP_ID\", jsonData.data.id);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"azure_vault_users\",\r\n    \"type\": \"external\",\r\n    \"metadata\": {\r\n        \"usage\": \"Azure AD OIDC Default Group\"\r\n    },\r\n    \"policies\": [\r\n        \"azure_ad_default\"\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{VAULT_ADDRESS}}/v1/identity/group"
													},
													"response": []
												},
												{
													"name": "Create Group Alias",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"pm.environment.set(\"VAULT_EXTERNALGROUP_ID\", jsonData.data.id);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"name\": \"{{AZURE_SECURITYGROUP_ID}}\",\r\n    \"mount_accessor\": \"{{VAULT_AZUREAD_OIDC_ACCESSOR}}\",\r\n    \"canonical_id\": \"{{VAULT_EXTERNALGROUP_ID}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{VAULT_ADDRESS}}/v1/identity/group-alias"
													},
													"response": []
												}
											]
										},
										{
											"name": "Login and Test",
											"item": [
												{
													"name": "Attain OIDC Authorization URL",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"role\": \"azure_ad_default\",\r\n    \"redirect_uri\": \"http://localhost:8200/ui/vault/auth/oidc/oidc/callback\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{VAULT_ADDRESS}}/v1/auth/oidc/oidc/auth_url"
													},
													"response": []
												}
											]
										},
										{
											"name": "Clean Up",
											"item": [
												{
													"name": "Delete Azure AD Access Policy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/azure_ad_default"
													},
													"response": []
												},
												{
													"name": "Disable Azure Oauth Authentication Engine",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{VAULT_ADDRESS}}/v1/sys/auth/oidc"
													},
													"response": []
												},
												{
													"name": "Delete Vault External Group",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{VAULT_ADDRESS}}/v1/identity/group/id/{{VAULT_EXTERNALGROUP_ID}}"
													},
													"response": []
												},
												{
													"name": "Delete Security Group",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": {
																"token": "{{AZURE_BEARER_TOKEN}}"
															}
														},
														"method": "DELETE",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "https://graph.microsoft.com/beta/groups/{{AZURE_SECURITYGROUP_ID}}"
													},
													"response": []
												},
												{
													"name": "Delete App Registration",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": {
																"token": "{{AZURE_BEARER_TOKEN}}"
															}
														},
														"method": "DELETE",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "https://graph.microsoft.com/v1.0/myorganization/applications/{{AZURE_OIDC_OBJECT_ID}}"
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"description": "[Reference Documentation](https://developer.hashicorp.com/vault/api-docs/secret/identity/oidc-provider)"
						},
						{
							"name": "Token",
							"item": [
								{
									"name": "Lookup Token Auth Tuning",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/auth/token/tune",
										"description": "[Reference Documentation for Auth Tuning]()\n\nLookup the Default and Max TTL in \\[s,h,d,m\\] options.\n\nThis method can be used for other auth methods by setting the auth path after /sys/auth/{insert auth path}/tune"
									},
									"response": []
								},
								{
									"name": "Create Auth Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.environment.set(\"VAULT_TOKEN_LOOKUP\", jsonData.auth.client_token);\r",
													"\r",
													"\r",
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"policies\": [\"test\"],\r\n  \"no-default-policy\": false,\r\n  \"meta\": {\r\n    \"usage\": \"Test Token\"\r\n  },\r\n  \"renewable\": true,\r\n  \"orphan\": true,\r\n  \"display_name\": \"My Token\",\r\n  \"no_parent\": true,\r\n  \"period\": \"7d\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/auth/token/create"
									},
									"response": []
								},
								{
									"name": "Lookup a Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"token\": \"{{VAULT_TOKEN_LOOKUP}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/auth/token/lookup"
									},
									"response": []
								},
								{
									"name": "Tune Token Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"default_lease_ttl\": \"7d\",\r\n  \"max_lease_ttl\": \"60d\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/auth/token/tune",
										"description": "[Reference Documentation for Auth Tuning]()\n\nAdjust the Default and Max TTL in \\[s,h,d,m\\] options. Be careful of setting too long of a lease to ensure proper token rotation"
									},
									"response": []
								}
							]
						},
						{
							"name": "JWT Authentication",
							"item": [
								{
									"name": "Enable Auth and Policy",
									"item": [
										{
											"name": "Enable JWT Authentication Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"path\": \"jwt\",\r\n    \"type\": \"jwt\",\r\n    \"config\": {}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/auth/jwt"
											},
											"response": []
										},
										{
											"name": "Update JWT Authentication Config",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "id",
															"value": "jwt",
															"type": "text"
														},
														{
															"key": "oidc_discovery_url",
															"value": "https://app.terraform.io",
															"type": "text"
														},
														{
															"key": "bound_issuer",
															"value": "https://app.terraform.io",
															"type": "text"
														},
														{
															"key": "namespace_in_state",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": "{{VAULT_ADDRESS}}/v1/auth/jwt/config"
											},
											"response": []
										},
										{
											"name": "Create JWT Access Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"policy\": \"path \\\"auth/token/lookup-self\\\" {\\n    capabilities = [\\\"read\\\"]\\n}\\npath \\\"auth/token/renew-self\\\" {\\n    capabilities = [\\\"update\\\"]\\n}\\npath \\\"auth/token/revoke-self\\\" {\\n    capabilities = [\\\"update\\\"]\\n}\\npath \\\"database/creds/readonly\\\" {\\n  capabilities = [ \\\"read\\\" ]\\n}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/:policy_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"policies",
														"acl",
														":policy_name"
													],
													"variable": [
														{
															"key": "policy_name",
															"value": "jwt_tfc_oidc"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Configure JWT Roles",
									"item": [
										{
											"name": "Dynamic Database Engine Role",
											"item": [
												{
													"name": "Get & Assign Role and Secret ID Variables",
													"item": [
														{
															"name": "Configure JWT Role for readonly database entry",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Execution Successful\", function () {\r",
																			"\r",
																			"    try {\r",
																			"\r",
																			"        pm.response.to.have.status(204);\r",
																			"\r",
																			"    } catch (e) {\r",
																			"\r",
																			"        console.log(e)\r",
																			"\r",
																			"        throw Error(e)\r",
																			"\r",
																			"    }\r",
																			"\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-Vault-Token",
																		"value": "{{VAULT_TOKEN}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"token_ttl\": \"15m\",\r\n  \"token_max_ttl\": \"5m\",\r\n  \"token_policies\": \"jwt_tfc_oidc\",\r\n  \"bound_audiences\": [\"vault.workload.identity\"],\r\n  \"bound_cidrs\":\"0.0.0.0/0\",\r\n  \"bound_claims_type\": \"glob\",\r\n  \"bound_claims\": {\r\n    \"sub\":\r\n\"organization:my-org-name:project:my-project-name:workspace:my-workspace-name:run_phase:*\"\r\n  },\r\n  \"user_claim\": \"terraform_full_workspace\",\r\n  \"role_type\": \"jwt\",\r\n  \"token_ttl\": \"5m\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{VAULT_ADDRESS}}/v1/auth/jwt/role/:role_name",
																	"host": [
																		"{{VAULT_ADDRESS}}"
																	],
																	"path": [
																		"v1",
																		"auth",
																		"jwt",
																		"role",
																		":role_name"
																	],
																	"variable": [
																		{
																			"key": "role_name",
																			"value": "dynamic_postgres_db_admin"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Get JWT Role Config for dynamic_postgres_db_admin",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Execution Successful\", function () {\r",
																			"\r",
																			"    try {\r",
																			"\r",
																			"        pm.response.to.have.status(200);\r",
																			"\r",
																			"    } catch (e) {\r",
																			"\r",
																			"        console.log(e)\r",
																			"\r",
																			"        throw Error(e)\r",
																			"\r",
																			"    }\r",
																			"\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-Vault-Token",
																		"value": "{{VAULT_TOKEN}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{VAULT_ADDRESS}}/v1/auth/jwt/role/:role_name",
																	"host": [
																		"{{VAULT_ADDRESS}}"
																	],
																	"path": [
																		"v1",
																		"auth",
																		"jwt",
																		"role",
																		":role_name"
																	],
																	"variable": [
																		{
																			"key": "role_name",
																			"value": "dynamic_postgres_db_admin"
																		}
																	]
																}
															},
															"response": []
														}
													]
												}
											],
											"description": "**Pre-Requisites**\n\n- Configure the Database Engine for postgres located in this collection"
										}
									]
								},
								{
									"name": "Clean Up Copy",
									"item": [
										{
											"name": "Delete ACL Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/:policy_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"policies",
														"acl",
														":policy_name"
													],
													"variable": [
														{
															"key": "policy_name",
															"value": "jwt_tfc_oidc"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Disable JWT Authentication Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/auth/jwt"
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "AWS Secrets Engine",
					"item": [
						{
							"name": "Enable Engine and Configure",
							"item": [
								{
									"name": "Enable AWS Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"aws\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/aws"
									},
									"response": []
								},
								{
									"name": "Configure AWS Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"access_key\": \"{{AWS_ACCESS_KEY}}\",\r\n    \"iam_endpoint\": null,\r\n    \"sts_endpoint\": null,\r\n    \"secret_key\": \"{{AWS_SECRET_KEY}}\",\r\n    \"region\": \"us-east-1\",\r\n    \"username_template\": \"{{ if (eq .Type \\\"STS\\\") }}{{ printf \\\"vault-%s-%s\\\"  (unix_time) (random 20) | truncate 32 }}{{ else }}{{ printf \\\"vault-%s-%s-%s\\\" (printf \\\"%s-%s\\\" (.DisplayName) (.PolicyName) | truncate 42) (unix_time) (random 20) | truncate 64 }}{{ end }}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/aws/config/root"
									},
									"response": []
								},
								{
									"name": "Configure AWS Engine Lease Duration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"lease\": \"5m\",\r\n    \"lease_max\": \"15m\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/aws/config/lease"
									},
									"response": []
								},
								{
									"name": "Read AWS Config",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "{{VAULT_ADDRESS}}/v1/aws/config/root"
									},
									"response": []
								},
								{
									"name": "Rotate Config Account Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/aws/config/rotate-root"
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Roles",
							"item": [
								{
									"name": "Create an AWS Role - IAM User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"credential_type\": \"iam_user\",\r\n    \"policy_arns\": [\r\n        \"arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess\"\r\n    ],\r\n    \"iam_tags\": {\r\n        \"usage\" : \"read account via Hashicorp Vault\",\r\n        \"created_time\"  : \"{{currentdate}}\"\r\n    },\r\n    \"permissions_boundary_arn\": null,\r\n    \"policy_document\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/aws/roles/read-only-aws"
									},
									"response": []
								},
								{
									"name": "Create an AWS Role - Assumed Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"credential_type\": \"assumed_role\",\r\n    \"role_arns\": [\r\n        {{VAULT_AWS_ROLEARNS}}\r\n    ],\r\n    \"default_sts_ttl\": 900\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/aws/roles/developer"
									},
									"response": []
								},
								{
									"name": "List Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "LIST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/aws/roles"
									},
									"response": []
								},
								{
									"name": "Read Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/aws/roles/:role_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"aws",
												"roles",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name",
													"value": "read-only-aws"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Generate Credentials",
							"item": [
								{
									"name": "Generate Dynamic AWS IAM User",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/aws/creds/read-only-aws"
									},
									"response": []
								},
								{
									"name": "Generate Dynamic AWS Assumed Role",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "{{VAULT_ADDRESS}}/v1/aws/creds/developer"
									},
									"response": []
								}
							]
						},
						{
							"name": "Clean Up",
							"item": [
								{
									"name": "Delete AWS Config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/aws/config"
									},
									"response": []
								},
								{
									"name": "Disable AWS Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/aws"
									},
									"response": []
								}
							]
						}
					],
					"description": "[Reference Documentation](https://developer.hashicorp.com/vault/api-docs/secret/aws#aws-secrets-engine-api)"
				},
				{
					"name": "Azure Secrets Engine",
					"item": [
						{
							"name": "Enable Engine and Configure",
							"item": [
								{
									"name": "Enable Azure Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"azure\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/azure"
									},
									"response": []
								},
								{
									"name": "Configure Azure Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"subscription_id\": \"{{AZURE_SUBSCRIPTION_ID}}\",\r\n  \"tenant_id\": \"{{AZURE_TENANT_ID}}\",\r\n  \"client_id\": \"{{AZURE_CLIENT_ID}}\",\r\n  \"client_secret\": \"{{AZURE_CLIENT_SECRET}}\",\r\n  \"use_microsoft_graph_api\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/azure/config"
									},
									"response": []
								},
								{
									"name": "Read Azure Config",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "{{VAULT_ADDRESS}}/v1/azure/config"
									},
									"response": []
								},
								{
									"name": "Rotate Config Account Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/azure/rotate-root"
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Roles",
							"item": [
								{
									"name": "Create/Update Role for Dynamic SPNs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"azure_roles\": \"[{\\\"role_name\\\" : \\\"Contributor\\\",\\\"scope\\\":\\\"/subscriptions/{{AZURE_SUBSCRIPTION_ID}}\\\"}]\",\r\n    \"ttl\": \"10m\",\r\n    \"max_ttl\": \"24h\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/azure/roles/dynamic-spn-account",
										"description": "[Reference Documentation](https://developer.hashicorp.com/vault/api-docs/secret/azure)\n\n**Note:** The Azure Role key is configured for the scope of the entire subscription."
									},
									"response": []
								},
								{
									"name": "Create/Update Role for Static SPNs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(pm.variables.get(\"test\"));\r",
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"application_object_id\": \"{{AZURE_APPLICATION_OBJECT_ID}}\",\r\n    \"ttl\": \"10m\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/azure/roles/static-spn-account"
									},
									"response": []
								},
								{
									"name": "List Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(200);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "LIST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/azure/roles"
									},
									"response": []
								},
								{
									"name": "List Specific Role Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/azure/roles/:role_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"azure",
												"roles",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name",
													"value": "static-spn-account"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Generate Credentials",
							"item": [
								{
									"name": "Generate Dynamic SPN Credential",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "{{VAULT_ADDRESS}}/v1/azure/creds/dynamic-spn-account"
									},
									"response": []
								},
								{
									"name": "Generate Static SPN Credential",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "{{VAULT_ADDRESS}}/v1/azure/creds/static-spn-account"
									},
									"response": []
								}
							]
						},
						{
							"name": "Clean Up",
							"item": [
								{
									"name": "Delete Azure Config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/azure/config"
									},
									"response": []
								},
								{
									"name": "Disable Azure Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/azure"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Database Engine",
					"item": [
						{
							"name": "Postgres Engine",
							"item": [
								{
									"name": "Enable Engine and Configure",
									"item": [
										{
											"name": "Enable Database Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"database\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/mounts/:database_mount_path",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"mounts",
														":database_mount_path"
													],
													"variable": [
														{
															"key": "database_mount_path",
															"value": "db_postgres"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Configure database connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"plugin_name\": \"postgresql-database-plugin\",\r\n  \"connection_url\": \"postgresql://{{username}}:{{password}}@{{DATABASE_HOSTNAME}}/postgres?sslmode=disable\",\r\n  \"allowed_roles\": [\r\n        \"readonly\",\r\n        \"db_user\"\r\n    ],\r\n  \"username\": \"postgres\",\r\n  \"password\": \"postgres\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:database_mount_path/config/postgres-db-docker",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":database_mount_path",
														"config",
														"postgres-db-docker"
													],
													"variable": [
														{
															"key": "database_mount_path",
															"value": "db_postgres"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Dynamic Credentials",
									"item": [
										{
											"name": "Configure Role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backend\": \"database\",\r\n    \"name\": \"readonly\",\r\n    \"type\": \"dynamic\",\r\n    \"default_ttl\": \"5m\",\r\n    \"max_ttl\": \"10m\",\r\n    \"rotation_period\": \"24h\",\r\n    \"creation_statements\": [\r\n        \"CREATE ROLE \\\"{{name}}\\\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}' INHERIT;\\nGRANT ro TO \\\"{{name}}\\\";\"\r\n    ],\r\n    \"path\": \"roles\",\r\n    \"db_name\": \"postgres-db-docker\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:database_mount_path/roles/readonly",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":database_mount_path",
														"roles",
														"readonly"
													],
													"variable": [
														{
															"key": "database_mount_path",
															"value": "db_postgres"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Request Dynamic Credentials",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.environment.set(\"vault_dynamic_credential_username\", jsonData.data.username);\r",
															"pm.environment.set(\"vault_dynamic_credential_password\", jsonData.data.password);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:database_mount_path/creds/:role_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":database_mount_path",
														"creds",
														":role_name"
													],
													"variable": [
														{
															"key": "database_mount_path",
															"value": "db_postgres"
														},
														{
															"key": "role_name",
															"value": "readonly"
														}
													]
												}
											},
											"response": [
												{
													"name": "Request Dynamic Credentials",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": []
														},
														"url": "{{VAULT_ADDRESS}}/v1/database/creds/readonly"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Cache-Control",
															"value": "no-store"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Strict-Transport-Security",
															"value": "max-age=31536000; includeSubDomains"
														},
														{
															"key": "Date",
															"value": "Fri, 29 Jul 2022 13:12:04 GMT"
														},
														{
															"key": "Content-Length",
															"value": "303"
														}
													],
													"cookie": [],
													"body": "{\n    \"request_id\": \"08c0ab9b-ea65-d5c5-1683-5b90b6705a89\",\n    \"lease_id\": \"database/creds/readonly/VWEY6mvROXTg2Py50hu6mVQF\",\n    \"renewable\": true,\n    \"lease_duration\": 120,\n    \"data\": {\n        \"password\": \"E-kpyfSiLhxRO6X28xAK\",\n        \"username\": \"v-root-readonly-XxQYXrJxlWYMCWHWLIde-1659100324\"\n    },\n    \"wrap_info\": null,\n    \"warnings\": null,\n    \"auth\": null\n}"
												}
											]
										}
									]
								},
								{
									"name": "Static Credentials",
									"item": [
										{
											"name": "Configure Role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backend\": \"database\",\r\n    \"name\": \"db_user\",\r\n    \"type\": \"static\",\r\n    \"default_ttl\": \"5m\",\r\n    \"max_ttl\": \"2h\",\r\n    \"username\": \"vault-demo-credentials\",\r\n    \"rotation_period\": \"12h\",\r\n    \"path\": \"static-roles\",\r\n    \"db_name\": \"postgres-db-docker\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:database_mount_path/static-roles/db_user",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":database_mount_path",
														"static-roles",
														"db_user"
													],
													"variable": [
														{
															"key": "database_mount_path",
															"value": "db_postgres"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Request Static Credentials",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:database_mount_path/static-creds/:role_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":database_mount_path",
														"static-creds",
														":role_name"
													],
													"variable": [
														{
															"key": "database_mount_path",
															"value": "db_postgres"
														},
														{
															"key": "role_name",
															"value": "db_user"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Rotate Static Credentials Manually",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backend\": \"database\",\r\n    \"name\": \"readonly\",\r\n    \"type\": \"dynamic\",\r\n    \"default_ttl\": \"5m\",\r\n    \"max_ttl\": \"2h\",\r\n    \"rotation_period\": \"24h\",\r\n    \"creation_statements\": [\r\n        \"CREATE ROLE \\\"{{name}}\\\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}' INHERIT;\\nGRANT ro TO \\\"{{name}}\\\";\"\r\n    ],\r\n    \"path\": \"roles\",\r\n    \"db_name\": \"readonly\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:database_mount_path/rotate-role/db_user",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":database_mount_path",
														"rotate-role",
														"db_user"
													],
													"variable": [
														{
															"key": "database_mount_path",
															"value": "db_postgres"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Clean Up",
									"item": [
										{
											"name": "Disable Database Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/mounts/:database_mount_path",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"mounts",
														":database_mount_path"
													],
													"variable": [
														{
															"key": "database_mount_path",
															"value": "db_postgres"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "MySQL Engine",
							"item": [
								{
									"name": "Enable Engine and Configure",
									"item": [
										{
											"name": "Enable Database Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"database\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/mounts/:database_mount_path",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"mounts",
														":database_mount_path"
													],
													"variable": [
														{
															"key": "database_mount_path",
															"value": "db_mysql"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Configure database connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"plugin_name\": \"mysql-database-plugin\",\r\n  \"connection_url\": \"{{username}}:{{password}}@tcp(mysql:3306)\",\r\n  \"allowed_roles\": [\r\n        \"vault-demo-app\"\r\n    ],\r\n  \"username\": \"root\",\r\n  \"password\": \"root\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:database_mount_path/config/mysql-db-docker",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":database_mount_path",
														"config",
														"mysql-db-docker"
													],
													"variable": [
														{
															"key": "database_mount_path",
															"value": "db_mysql"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Dynamic Credentials",
									"item": [
										{
											"name": "Configure Role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backend\": \"database\",\r\n    \"name\": \"vault-demo-app\",\r\n    \"type\": \"dynamic\",\r\n    \"default_ttl\": \"5m\",\r\n    \"max_ttl\": \"10m\",\r\n    \"rotation_period\": \"24h\",\r\n    \"creation_statements\": [\r\n        \"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}';GRANT ALL ON my_app.* TO '{{name}}'@'%';\"\r\n    ],\r\n    \"path\": \"roles\",\r\n    \"db_name\": \"mysql-db-docker\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/database/roles/readonly"
											},
											"response": []
										},
										{
											"name": "Request Dynamic Credentials",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.environment.set(\"vault_dynamic_credential_username\", jsonData.data.username);\r",
															"pm.environment.set(\"vault_dynamic_credential_password\", jsonData.data.password);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:database_mount_path/creds/:role_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":database_mount_path",
														"creds",
														":role_name"
													],
													"variable": [
														{
															"key": "database_mount_path",
															"value": "db_postgres"
														},
														{
															"key": "role_name",
															"value": "vault-demo-app"
														}
													]
												}
											},
											"response": [
												{
													"name": "Request Dynamic Credentials",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": []
														},
														"url": "{{VAULT_ADDRESS}}/v1/database/creds/readonly"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Cache-Control",
															"value": "no-store"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Strict-Transport-Security",
															"value": "max-age=31536000; includeSubDomains"
														},
														{
															"key": "Date",
															"value": "Fri, 29 Jul 2022 13:12:04 GMT"
														},
														{
															"key": "Content-Length",
															"value": "303"
														}
													],
													"cookie": [],
													"body": "{\n    \"request_id\": \"08c0ab9b-ea65-d5c5-1683-5b90b6705a89\",\n    \"lease_id\": \"database/creds/readonly/VWEY6mvROXTg2Py50hu6mVQF\",\n    \"renewable\": true,\n    \"lease_duration\": 120,\n    \"data\": {\n        \"password\": \"E-kpyfSiLhxRO6X28xAK\",\n        \"username\": \"v-root-readonly-XxQYXrJxlWYMCWHWLIde-1659100324\"\n    },\n    \"wrap_info\": null,\n    \"warnings\": null,\n    \"auth\": null\n}"
												}
											]
										}
									]
								},
								{
									"name": "Clean Up",
									"item": [
										{
											"name": "Disable Database Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/mounts/:database_mount_path",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"mounts",
														":database_mount_path"
													],
													"variable": [
														{
															"key": "database_mount_path",
															"value": "db_mysql"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Entities",
					"item": [
						{
							"name": "Create an Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(200);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"entity_id\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"metadata\": {\r\n    \"owner_email\": \"user1@mydomain.io\",\r\n    \"usage\": \"demo purposes\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/identity/entity"
							},
							"response": []
						},
						{
							"name": "Read Entity by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(200);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/identity/entity/id/{{entity_id}}"
							},
							"response": []
						},
						{
							"name": "Update Entity by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(204);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"demo-entity-1\",\r\n    \"metadata\": {\r\n        \"usage\": \"demo purposes123\",\r\n        \"modified_date\": \"{{currentdate}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/identity/entity/id/{{entity_id}}"
							},
							"response": []
						},
						{
							"name": "Create 2nd Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(200);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"entity_id_2\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"metadata\": {\r\n    \"owner_email\": \"user1@mydomain.com\",\r\n    \"usage\": \"2nd entity - needs to be merged\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/identity/entity"
							},
							"response": []
						},
						{
							"name": "Create 3rd Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(200);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"entity_id_3\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"metadata\": {\r\n    \"owner_email\": \"user1@mydomain.org\",\r\n    \"usage\": \"3rd entity - needs to be merged\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/identity/entity"
							},
							"response": []
						},
						{
							"name": "Merge Entities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(204);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.environment.set(\"entity_id_2\", null);\r",
											"pm.environment.set(\"entity_id_3\", null);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"to_entity_id\": \"{{entity_id}}\",\r\n  \"from_entity_ids\": [\r\n    \"{{entity_id_2}}\",\r\n    \"{{entity_id_3}}\"\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/identity/entity/merge"
							},
							"response": []
						},
						{
							"name": "Delete Entity by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(204);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});\r",
											"pm.environment.set(\"entity_id\", null);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/identity/entity/id/{{entity_id}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Key Value Engine",
					"item": [
						{
							"name": "Enable Engine and Configure",
							"item": [
								{
									"name": "Enable Key Value Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"path\": \"mySecretKeys\",\r\n    \"type\": \"kv\",\r\n    \"description\": \"Demo of key:value engine\",\r\n    \"config\": {\r\n        \"default_lease_ttl\": \"5\"\r\n    },\r\n    \"options\": {\r\n        \"version\": 2\r\n    },\r\n    \"generate_signing_key\": true,\r\n    \"id\": \"mySecretKeys\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/mySecretKeys"
									},
									"response": []
								},
								{
									"name": "Add Key Value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"data\": {\r\n        \"code\": \"abcdefghijklmnopqrstuvwxyz\"\r\n    },\r\n    \"options\": {\r\n        \"cas\": 0\r\n    },\r\n    \"custom_metadata\": {\r\n        \"owner\": \"brandon\",\r\n        \"usage\": \"demo-purposes\",\r\n        \"test\": \"123\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/mySecretKeys/data/{{VAULT_KV_PATH}}"
									},
									"response": []
								},
								{
									"name": "Add Key Value - postgres_db_admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"data\": {\r\n        \"token\": \"dbP@ssword!\"\r\n    },\r\n    \"options\": {\r\n        \"cas\": 0\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/mySecretKeys/data/postgres_db_admin"
									},
									"response": []
								},
								{
									"name": "Add Key Value Metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"custom_metadata\": {\r\n        \"owner\": \"brandon\",\r\n        \"usage\": \"demo-purposes\",\r\n        \"test\": \"123564\",\r\n        \"last_used_by\": \"whoever\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/mySecretKeys/metadata/{{VAULT_KV_PATH}}",
										"description": "The options>cas is a counter which will need to be incremented with new versions"
									},
									"response": []
								}
							]
						},
						{
							"name": "Read Secrets",
							"item": [
								{
									"name": "Read Key Value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.environment.set(\"output_from_Vault\", jsonData.data.data.code);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "{{VAULT_ADDRESS}}/v1/mySecretKeys/data/{{VAULT_KV_PATH}}"
									},
									"response": [
										{
											"name": "Read Key Value",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": "{{VAULT_ADDRESS}}/v1/mySecretKeys/data/{{VAULT_KV_PATH}}"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-store"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "Date",
													"value": "Tue, 04 Oct 2022 18:49:47 GMT"
												},
												{
													"key": "Content-Length",
													"value": "417"
												}
											],
											"cookie": [],
											"body": "{\n    \"request_id\": \"b76acca1-c6b5-61ca-0be9-d6b9decfcf3e\",\n    \"lease_id\": \"\",\n    \"renewable\": false,\n    \"lease_duration\": 0,\n    \"data\": {\n        \"data\": {\n            \"code\": \"abcdefghijklmnopqrstuvwxyz\"\n        },\n        \"metadata\": {\n            \"created_time\": \"2022-10-04T18:49:37.218845791Z\",\n            \"custom_metadata\": {\n                \"last_used_by\": \"whoever\",\n                \"owner\": \"brandon\",\n                \"test\": \"123564\",\n                \"usage\": \"demo-purposes\"\n            },\n            \"deletion_time\": \"\",\n            \"destroyed\": false,\n            \"version\": 1\n        }\n    },\n    \"wrap_info\": null,\n    \"warnings\": null,\n    \"auth\": null\n}"
										}
									]
								}
							]
						},
						{
							"name": "Batch Update Example",
							"item": [
								{
									"name": "Runner",
									"item": [
										{
											"name": "Add Key Value Batch Runner",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"password\": \"{{batch_password_value}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/service-accounts/{{batch_username_value}}"
											},
											"response": []
										}
									]
								},
								{
									"name": "Enable Key Value Engine - Batch Example",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"path\": \"service-accounts\",\r\n    \"type\": \"kv\",\r\n    \"description\": \"Import of Service Accounts\",\r\n    \"config\": {\r\n        \"default_lease_ttl\": \"0\"\r\n    },\r\n    \"options\": {\r\n        \"version\": 1\r\n    },\r\n    \"generate_signing_key\": true,\r\n    \"id\": \"service-accounts\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/service-accounts"
									},
									"response": []
								},
								{
									"name": "Disable Key Value Engine - Batch Example",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/service-accounts"
									},
									"response": []
								}
							]
						},
						{
							"name": "Batch Tester",
							"item": [
								{
									"name": "Read Key Value - Chaos Monkey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.environment.set(\"output_from_Vault\", jsonData.data.data.code);\r",
													"\r",
													"pm.test(\"Response time is less than 10ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "{{VAULT_ADDRESS}}/v1/mySecretKeys/data/{{VAULT_KV_PATH}}"
									},
									"response": []
								}
							]
						},
						{
							"name": "Clean Up",
							"item": [
								{
									"name": "Disable Key Value Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/mySecretKeys"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Key Value v2 Engine",
					"item": [
						{
							"name": "Enable Engine and Configure",
							"item": [
								{
									"name": "Enable Key Value Engine",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"path\": \"kv2\",\r\n    \"type\": \"kv\",\r\n    \"config\": {},\r\n    \"options\": {\r\n        \"version\": 2\r\n    },\r\n    \"generate_signing_key\": true,\r\n    \"id\": \"kv2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/kv2"
									},
									"response": []
								},
								{
									"name": "Add Key Value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"data\": {\r\n        \"password\": \"abcdefg\",\r\n        \"recovery_phrase\": \"red ring bologna\"\r\n    },\r\n    \"options\": {\r\n        \"cas\": 0\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kv2/data/:secret",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kv2",
												"data",
												":secret"
											],
											"variable": [
												{
													"key": "secret",
													"value": "service-account-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Key Value Metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"service-account-1\",\r\n    \"custom_metadata\": {\r\n        \"owner\": \"user@domain.com\",\r\n        \"created date\": \"123\"\r\n    },\r\n    \"max_versions\": 10,\r\n    \"cas_required\": false,\r\n    \"delete_version_after\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kv2/metadata/:secret",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kv2",
												"metadata",
												":secret"
											],
											"variable": [
												{
													"key": "secret",
													"value": "service-account-1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Read Secrets",
							"item": [
								{
									"name": "Read Key Value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kv2/data/:secret",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kv2",
												"data",
												":secret"
											],
											"variable": [
												{
													"key": "secret",
													"value": "service-account-1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Clean Up",
							"item": [
								{
									"name": "Disable Key Value Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/kv2"
									},
									"response": []
								}
							]
						}
					],
					"description": "[Reference Documentation](https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2)"
				},
				{
					"name": "KMS Engine",
					"item": [
						{
							"name": "Enable Engine",
							"item": [
								{
									"name": "Enable KMS Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"keymgmt\",\r\n    \"config\": {},\r\n    \"generate_signing_key\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/sys/mounts/:kms_engine_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"sys",
												"mounts",
												":kms_engine_name"
											],
											"variable": [
												{
													"key": "kms_engine_name",
													"value": "kms-demo"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "AWS",
							"item": [
								{
									"name": "Add KMS Provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backend\": \"kms-demo\",\r\n    \"provider\": \"awskms\",\r\n    \"key_collection\": \"us-east-1\",\r\n    \"credentials\": {\r\n        \"access_key\": \"{{AWS_ACCESS_KEY}}\",\r\n        \"secret_key\": \"{{AWS_SECRET_KEY}}\",\r\n        \"session_token\": \"{{AWS_SESSION_TOKEN}}\",\r\n        \"endpoint\": \"\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kms-demo/kms/:provider_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kms-demo",
												"kms",
												":provider_name"
											],
											"variable": [
												{
													"key": "provider_name",
													"value": "demo-kms-4-aws"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create KMS Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"aes256-gcm96\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/:kms_engine_name/key/:key_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												":kms_engine_name",
												"key",
												":key_name"
											],
											"variable": [
												{
													"key": "kms_engine_name",
													"value": "kms-demo"
												},
												{
													"key": "key_name",
													"value": "aws-secret-key"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update KMS Key - Allow for Deletion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"deletion_allowed\": true,\r\n    \"min_enabled_version\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/:kms_engine_name/key/:key_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												":kms_engine_name",
												"key",
												":key_name"
											],
											"variable": [
												{
													"key": "kms_engine_name",
													"value": "kms-demo"
												},
												{
													"key": "key_name",
													"value": "aws-secret-key"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Distribute KMS Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"purpose\": \"encrypt,decrypt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kms-demo/kms/:provider_name/key/:key_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kms-demo",
												"kms",
												":provider_name",
												"key",
												":key_name"
											],
											"variable": [
												{
													"key": "provider_name",
													"value": "demo-kms-4-aws"
												},
												{
													"key": "key_name",
													"value": "aws-secret-key"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Keys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kms-demo/kms/:provider_name/key?list=true",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kms-demo",
												"kms",
												":provider_name",
												"key"
											],
											"query": [
												{
													"key": "list",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "provider_name",
													"value": "demo-kms-4-aws"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Rotate KMS Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/:kms_engine_name/key/:key_name/rotate",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												":kms_engine_name",
												"key",
												":key_name",
												"rotate"
											],
											"variable": [
												{
													"key": "kms_engine_name",
													"value": "kms-demo"
												},
												{
													"key": "key_name",
													"value": "aws-secret-key"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Min Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"deletion_allowed\": true,\r\n    \"min_enabled_version\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/:kms_engine_name/key/:key_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												":kms_engine_name",
												"key",
												":key_name"
											],
											"variable": [
												{
													"key": "kms_engine_name",
													"value": "kms-demo"
												},
												{
													"key": "key_name",
													"value": "aws-secret-key"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Key from AWS Provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kms-demo/kms/:provider_name/key/:key_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kms-demo",
												"kms",
												":provider_name",
												"key",
												":key_name"
											],
											"variable": [
												{
													"key": "provider_name",
													"value": "demo-kms-4-aws"
												},
												{
													"key": "key_name",
													"value": "aws-secret-key"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Azure",
							"item": [
								{
									"name": "Add KMS Provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backend\": \"kms-demo\",\r\n    \"provider\": \"azurekeyvault\",\r\n    \"key_collection\": \"bmiller-kms-demo\",\r\n    \"credentials\": {\r\n        \"client_id\": \"{{AZURE_CLIENT_ID}}\",\r\n        \"client_secret\": \"{{AZURE_CLIENT_SECRET}}\",\r\n        \"tenant_id\": \"{{AZURE_TENANT_ID}}\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kms-demo/kms/:provider_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kms-demo",
												"kms",
												":provider_name"
											],
											"variable": [
												{
													"key": "provider_name",
													"value": "demo-kms-4-azure"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create KMS Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"rsa-4096\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/:kms_engine_name/key/:key_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												":kms_engine_name",
												"key",
												":key_name"
											],
											"variable": [
												{
													"key": "kms_engine_name",
													"value": "kms-demo"
												},
												{
													"key": "key_name",
													"value": "azure-secret-key"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Distribute KMS Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"purpose\": \"encrypt,decrypt\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kms-demo/kms/:provider_name/key/:key_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kms-demo",
												"kms",
												":provider_name",
												"key",
												":key_name"
											],
											"variable": [
												{
													"key": "provider_name",
													"value": "demo-kms-4-azure"
												},
												{
													"key": "key_name",
													"value": "azure-secret-key"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Provider Specific Keys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kms-demo/kms/:provider_name/key?list=true",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kms-demo",
												"kms",
												":provider_name",
												"key"
											],
											"query": [
												{
													"key": "list",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "provider_name",
													"value": "demo-kms-4-azure"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List All Keys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kms-demo/key?list=true",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kms-demo",
												"key"
											],
											"query": [
												{
													"key": "list",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Specific Provider Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kms-demo/kms/:provider_name/key/:key_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kms-demo",
												"kms",
												":provider_name",
												"key",
												":key_name"
											],
											"variable": [
												{
													"key": "provider_name",
													"value": "demo-kms-4-azure"
												},
												{
													"key": "key_name",
													"value": "azure-secret-key"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Specific Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kms-demo/key/:key_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kms-demo",
												"key",
												":key_name"
											],
											"variable": [
												{
													"key": "key_name",
													"value": "azure-secret-key"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Rotate KMS Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/:kms_engine_name/key/:key_name/rotate",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												":kms_engine_name",
												"key",
												":key_name",
												"rotate"
											],
											"variable": [
												{
													"key": "kms_engine_name",
													"value": "kms-demo"
												},
												{
													"key": "key_name",
													"value": "azure-secret-key"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply New Key Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"deletion_allowed\": true,\r\n    \"min_enabled_version\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/:kms_engine_name/key/:key_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												":kms_engine_name",
												"key",
												":key_name"
											],
											"variable": [
												{
													"key": "kms_engine_name",
													"value": "kms-demo"
												},
												{
													"key": "key_name",
													"value": "azure-secret-key"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove KMS Key from Provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/kms-demo/kms/:provider_name/key/:key_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"kms-demo",
												"kms",
												":provider_name",
												"key",
												":key_name"
											],
											"variable": [
												{
													"key": "provider_name",
													"value": "demo-kms-4-azure"
												},
												{
													"key": "key_name",
													"value": "azure-secret-key"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "### Pre-Requisites\n\nThis use case requires an existing Azure Key Vault and Resource Group. The configurations can be set via variables.\n\nTo simplify the creation of the Key Vault, please see the following [repository](https://github.com/spiyacy/azure_keyvault_create) to do it via Terraform!"
						},
						{
							"name": "Clean Up",
							"item": [
								{
									"name": "Disable KMS Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/sys/mounts/:kms_engine_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"sys",
												"mounts",
												":kms_engine_name"
											],
											"variable": [
												{
													"key": "kms_engine_name",
													"value": "kms-demo"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PKI Engine",
					"item": [
						{
							"name": "Root CA Configuration",
							"item": [
								{
									"name": "Enable Engine and Create Certificate",
									"item": [
										{
											"name": "Enable PKI Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"path\": \"pki\",\r\n    \"type\": \"pki\",\r\n    \"config\": {\r\n        \"max_lease_ttl\": \"180d\"\r\n    },\r\n    \"generate_signing_key\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/pki"
											},
											"response": []
										},
										{
											"name": "Set Max TTL of Issued Certificates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"max_lease_ttl\": \"365d\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/pki/tune"
											},
											"response": []
										},
										{
											"name": "Configure CA Certificate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"common_name\": \"hashi-demo.com\",\r\n    \"key_bits\": 4096,\r\n    \"key_type\": \"rsa\",\r\n    \"max_path_length\": -1,\r\n    \"organization\": [\r\n        \"Hashi-Demos\"\r\n    ],\r\n    \"private_key_format\": \"pem\",\r\n    \"exclude_cn_from_sans\": false,\r\n    \"format\": \"pem\",\r\n    \"ttl\": \"365d\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/pki/root/generate/internal"
											},
											"response": []
										},
										{
											"name": "Configure CA Certificate with Issuer Name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"common_name\": \"hashi-demo.com\",\r\n    \"key_bits\": 4096,\r\n    \"key_type\": \"rsa\",\r\n    \"max_path_length\": -1,\r\n    \"organization\": [\r\n        \"Hashi-Demos\"\r\n    ],\r\n    \"private_key_format\": \"pem\",\r\n    \"exclude_cn_from_sans\": false,\r\n    \"issuer_name\": \"vault_local\",\r\n    \"format\": \"pem\",\r\n    \"ttl\": \"365d\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/pki/root/generate/internal"
											},
											"response": []
										},
										{
											"name": "Configure PKI URLs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"issuing_certificates\": [\r\n        \"{{VAULT_ADDRESS}}/v1/pki/ca\"\r\n    ],\r\n    \"crl_distribution_points\": [\r\n        \"{{VAULT_ADDRESS}}/v1/pki/crl\"\r\n    ],\r\n    \"ocsp_servers\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/pki/config/urls"
											},
											"response": []
										},
										{
											"name": "List PKI Issuers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "LIST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/pki/issuers"
											},
											"response": []
										},
										{
											"name": "Get Target Issuer Details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/pki/issuer/:issuer",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"pki",
														"issuer",
														":issuer"
													],
													"variable": [
														{
															"key": "issuer",
															"value": null
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Configure Roles",
									"item": [
										{
											"name": "Create PKI Role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"allowed_domains\": \"hashi-demo.com\",\r\n    \"allow_subdomains\": true,\r\n    \"allow_ip_sans\": true,\r\n    \"allow_localhost\": true,\r\n    \"client_flag\": true,\r\n    \"enforce_hostnames\": true,\r\n    \"key_usage\": \"DigitalSignature,KeyAgreement,KeyEncipherment\",\r\n    \"not_before_duration\": 30,\r\n    \"server_flag\": true,\r\n    \"use_csr_common_name\": true,\r\n    \"use_csr_sans\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/pki/roles/server_pki_demo"
											},
											"response": []
										},
										{
											"name": "List Roles",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "LIST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/pki/roles"
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Cert",
									"item": [
										{
											"name": "Generate Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"common_name\": \"test.hashi-demo.com\",\r\n    \"exclude_cn_from_sans\": false,\r\n    \"format\": \"pem\",\r\n    \"ttl\": \"30s\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/pki/issue/server_pki_demo"
											},
											"response": []
										},
										{
											"name": "List Certs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/pki/certs?list=true",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"pki",
														"certs"
													],
													"query": [
														{
															"key": "list",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Cert Details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/pki/cert/:cert_id",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"pki",
														"cert",
														":cert_id"
													],
													"variable": [
														{
															"key": "cert_id",
															"value": "18:61:cd:93:78:63:da:cf:56:04:2f:2b:0a:ad:5d:24:df:08:36:e4"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Clean Up",
									"item": [
										{
											"name": "Revoke Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"serial_number\": \"18:61:cd:93:78:63:da:cf:56:04:2f:2b:0a:ad:5d:24:df:08:36:e4\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/pki/revoke"
											},
											"response": []
										},
										{
											"name": "Tidy - Clean Expired Certs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(202);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"tidy_cert_store\": true,\r\n    \"tidy_revoked_certs\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/pki/tidy"
											},
											"response": []
										},
										{
											"name": "Disable PKI Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/pki"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Intermediate CA Configuration",
							"item": [
								{
									"name": "Enable Engine and Create Certificate",
									"item": [
										{
											"name": "Enable PKI Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\r\n    \"type\": \"pki\",\r\n    \"config\": {\r\n        \"max_lease_ttl\": \"180d\"\r\n    },\r\n    \"generate_signing_key\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/mounts/:engine_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"mounts",
														":engine_name"
													],
													"variable": [
														{
															"key": "engine_name",
															"value": "pki_intermediate"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Set Max TTL of Issued Certificates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"max_lease_ttl\": \"365d\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/mounts/:engine_name/tune",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"mounts",
														":engine_name",
														"tune"
													],
													"variable": [
														{
															"key": "engine_name",
															"value": "pki_intermediate"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Configure CA Certificate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"common_name\": \"hashi-demo.com\",\r\n    \"key_bits\": 4096,\r\n    \"key_type\": \"rsa\",\r\n    \"max_path_length\": -1,\r\n    \"organization\": [\r\n        \"Hashi-Demos\"\r\n    ],\r\n    \"private_key_format\": \"pem\",\r\n    \"exclude_cn_from_sans\": false,\r\n    \"format\": \"pem\",\r\n    \"ttl\": \"365d\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:engine_name/root/generate/internal",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":engine_name",
														"root",
														"generate",
														"internal"
													],
													"variable": [
														{
															"key": "engine_name",
															"value": "pki_intermediate"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "List PKI Issuers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "LIST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:engine_name/issuers",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":engine_name",
														"issuers"
													],
													"variable": [
														{
															"key": "engine_name",
															"value": "pki_intermediate"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Target Issuer Details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:engine_name/issuer/:issuer_id",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":engine_name",
														"issuer",
														":issuer_id"
													],
													"variable": [
														{
															"key": "engine_name",
															"value": "pki_intermediate"
														},
														{
															"key": "issuer_id",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Configure PKI URLs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"issuing_certificates\": [\r\n        \"{{VAULT_ADDRESS}}/v1/pki/ca\"\r\n    ],\r\n    \"crl_distribution_points\": [\r\n        \"{{VAULT_ADDRESS}}/v1/pki/crl\"\r\n    ],\r\n    \"ocsp_servers\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/pki/config/urls"
											},
											"response": []
										}
									]
								},
								{
									"name": "Configure Roles",
									"item": [
										{
											"name": "Create PKI Role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"allowed_domains\": \"hashi-demo.com\",\r\n    \"allow_subdomains\": true,\r\n    \"allow_ip_sans\": true,\r\n    \"allow_localhost\": true,\r\n    \"client_flag\": true,\r\n    \"enforce_hostnames\": true,\r\n    \"key_usage\": \"DigitalSignature,KeyAgreement,KeyEncipherment\",\r\n    \"not_before_duration\": 30,\r\n    \"server_flag\": true,\r\n    \"use_csr_common_name\": true,\r\n    \"use_csr_sans\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:engine_name/roles/server_pki_demo",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":engine_name",
														"roles",
														"server_pki_demo"
													],
													"variable": [
														{
															"key": "engine_name",
															"value": "pki_intermediate"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "List Roles",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "LIST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:engine_name/roles",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":engine_name",
														"roles"
													],
													"variable": [
														{
															"key": "engine_name",
															"value": "pki_intermediate"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Cert",
									"item": [
										{
											"name": "Generate Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"common_name\": \"test.hashi-demo.com\",\r\n    \"exclude_cn_from_sans\": false,\r\n    \"format\": \"pem\",\r\n    \"ttl\": \"30s\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:engine_name/issue/server_pki_demo",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":engine_name",
														"issue",
														"server_pki_demo"
													],
													"variable": [
														{
															"key": "engine_name",
															"value": "pki_intermediate"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "List Certs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:engine_name/certs?list=true",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":engine_name",
														"certs"
													],
													"query": [
														{
															"key": "list",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "engine_name",
															"value": "pki_intermediate"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Cert Details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:engine_name/cert/:cert_id",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":engine_name",
														"cert",
														":cert_id"
													],
													"variable": [
														{
															"key": "engine_name",
															"value": "pki_intermediate"
														},
														{
															"key": "cert_id",
															"value": null
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Clean Up",
									"item": [
										{
											"name": "Revoke Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(200);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"serial_number\": \"6d:10:83:eb:69:a5:fa:ac:8a:24:1d:01:da:e0:f4:3d:4d:19:cf:57\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/:engine_name/revoke",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														":engine_name",
														"revoke"
													],
													"variable": [
														{
															"key": "engine_name",
															"value": "pki_intermediate"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Disable PKI Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/mounts/:engine_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"mounts",
														":engine_name"
													],
													"variable": [
														{
															"key": "engine_name",
															"value": "pki_intermediate"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"description": "[Reference Documentation](https://developer.hashicorp.com/vault/api-docs/secret/pki)"
				},
				{
					"name": "Transform Engine",
					"item": [
						{
							"name": "Enable Engine and Configure",
							"item": [
								{
									"name": "Enable Transform Engine Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"path\": \"transform\",\r\n    \"type\": \"transform\",\r\n    \"config\": {},\r\n    \"generate_signing_key\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/transform"
									},
									"response": []
								},
								{
									"name": "Create SSN Template for Transform",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"regex\",\r\n    \"pattern\": \"^(\\\\d{3}-?\\\\d{2}-?\\\\d{4}|XXX-XX-XXXX)$\",\r\n    \"alphabet\": \"builtin/numeric\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/transform/template/ssn"
									},
									"response": []
								},
								{
									"name": "List Transform Templates Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/transform/template/:template_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"transform",
												"template",
												":template_name"
											],
											"variable": [
												{
													"key": "template_name",
													"value": "ssn"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Transformation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"fpe\",\r\n    \"tweak_source\": \"generated\",\r\n    \"masking_character\": \"#\",\r\n    \"template\": \"ssn\",\r\n    \"allowed_roles\": [\r\n        \"ssn_viewer\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/transform/transformation/pii_ssn"
									},
									"response": []
								},
								{
									"name": "List Transform Templates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "LIST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/transform/template"
									},
									"response": []
								},
								{
									"name": "Create Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"transformations\": [\r\n        \"pii_ssn\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/transform/role/ssn_viewer"
									},
									"response": []
								}
							]
						},
						{
							"name": "Encode/Decode",
							"item": [
								{
									"name": "Encode Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"VAULT_TRANSFORM_ENCODED_VALUE\", jsonData.data.encoded_value);\r",
													"pm.environment.set(\"VAULT_TRANSFORM_TWEAK_VALUE\", jsonData.data.tweak);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"value\": \"777889999\",\r\n\"transformation\": \"pii_ssn\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/transform/encode/:role_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"transform",
												"encode",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name",
													"value": "ssn_viewer"
												}
											]
										},
										"description": "Reference Documentation on Tweak Settings  \n[https://developer.hashicorp.com/vault/docs/secrets/transform/ff3-tweak-details](https://developer.hashicorp.com/vault/docs/secrets/transform/ff3-tweak-details)"
									},
									"response": []
								},
								{
									"name": "Decode Data",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"value\": \"{{VAULT_TRANSFORM_ENCODED_VALUE}}\",\r\n    \"transformation\": \"pii_ssn\",\r\n    \"tweak\": \"{{VAULT_TRANSFORM_TWEAK_VALUE}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/transform/decode/:role_name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"transform",
												"decode",
												":role_name"
											],
											"variable": [
												{
													"key": "role_name",
													"value": "ssn_viewer"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Clean Up",
							"item": [
								{
									"name": "Disable Transform Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/transform"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Transit Engine",
					"item": [
						{
							"name": "Enable Engine and Configure",
							"item": [
								{
									"name": "Enable Transit Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"path\": \"transit-demo\",\r\n    \"type\": \"transit\",\r\n    \"config\": {},\r\n    \"generate_signing_key\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/transit-demo"
									},
									"response": []
								},
								{
									"name": "Create Encryption Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"rsa-4096\",\r\n    \"name\": \"secret-encryption-key\",\r\n    \"auto_rotate_period\": \"0\",\r\n    \"deletion_allowed\": false,\r\n    \"derived\": false,\r\n    \"exportable\": true,\r\n    \"min_decryption_version\": 1,\r\n    \"min_encryption_version\": 0,\r\n    \"latest_version\": null,\r\n    \"keys\": {},\r\n    \"convergent_encryption\": false,\r\n    \"convergent_encryption_version\": null,\r\n    \"supports_signing\": false,\r\n    \"supports_encryption\": false,\r\n    \"supports_decryption\": false,\r\n    \"supports_derivation\": false,\r\n    \"backend\": \"transit-demo\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/transit-demo/keys/secret-encryption-key"
									},
									"response": []
								},
								{
									"name": "Update Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"min_decryption_version\": 1,\r\n    \"min_encryption_version\": 0,\r\n    \"deletion_allowed\": true,\r\n    \"auto_rotate_period\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/transit-demo/keys/secret-encryption-key/config"
									},
									"response": []
								},
								{
									"name": "List Keys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "LIST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/transit-demo/keys"
									},
									"response": []
								},
								{
									"name": "Export the Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/transit-demo/export/encryption-key/secret-encryption-key"
									},
									"response": []
								}
							]
						},
						{
							"name": "Encrypt/Decrypt",
							"item": [
								{
									"name": "Encrypt Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.environment.set(\"encrypt_cipher_text\", jsonData.data.ciphertext);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"plaintext\": \"dGhpcyBpcyBteSBzdXBlciBzZWNyZXQgbWVzc2FnZQ==\",\r\n    \"key_version\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/transit-demo/encrypt/secret-encryption-key",
										"description": "The \"plaintext\" field must be the base64 encoded values.\n\nGo to [https://www.base64encode.org/](https://www.base64encode.org/) to encode/decode your base64 text"
									},
									"response": []
								},
								{
									"name": "Decrypt Data",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ciphertext\": \"{{encrypt_cipher_text}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/transit-demo/decrypt/secret-encryption-key",
										"description": "The \"plaintext\" field must be the base64 encoded values.\n\nGo to [https://www.base64encode.org/](https://www.base64encode.org/) to encode/decode your base64 text"
									},
									"response": []
								}
							]
						},
						{
							"name": "Clean Up",
							"item": [
								{
									"name": "Delete Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/transit-demo/keys/secret-encryption-key"
									},
									"response": []
								},
								{
									"name": "Disable Transit Engine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/transit-demo"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Terraform Cloud Engine",
					"item": [
						{
							"name": "User Based API Tokens",
							"item": [
								{
									"name": "Enable Engine and Configure",
									"item": [
										{
											"name": "Enable Terraform Engine",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"terraform\",\r\n    \"description\": \"Terraform Cloud Dynamic API Keys\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/terraform"
											},
											"response": []
										},
										{
											"name": "Configure Terraform Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"token\": \"{{Terraform_Cloud_User_Token}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/terraform/config"
											},
											"response": []
										},
										{
											"name": "Read Terraform Config",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": "{{VAULT_ADDRESS}}/v1/terraform/config"
											},
											"response": []
										}
									]
								},
								{
									"name": "Query TF for Users",
									"item": [
										{
											"name": "Get Terraform User ID Details",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{Terraform_Cloud_User_Token}}"
													}
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "https://app.terraform.io/api/v2/account/details"
											},
											"response": []
										}
									]
								},
								{
									"name": "Create Role",
									"item": [
										{
											"name": "Create Role for Terraform Temp Access",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"user_id\": \"{{Terraform_UserID}}\",\r\n    \"ttl\": \"60m\",\r\n    \"max_ttl\": \"24h\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/terraform/role/:role_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"terraform",
														"role",
														":role_name"
													],
													"variable": [
														{
															"key": "role_name",
															"value": "terraform-dynamic-access"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "List Roles",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "LIST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/terraform/role"
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate User Tokens",
									"item": [
										{
											"name": "Generate Terraform User Token",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/terraform/creds/:role_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"terraform",
														"creds",
														":role_name"
													],
													"variable": [
														{
															"key": "role_name",
															"value": "terraform-dynamic-access"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "List Active Leases",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "LIST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/leases/lookup/terraform/creds/:role_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"leases",
														"lookup",
														"terraform",
														"creds",
														":role_name"
													],
													"variable": [
														{
															"key": "role_name",
															"value": "terraform-dynamic-access"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Lease Lookup",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"lease_id\": \"terraform/creds/terraform-dynamic-access/onagk0AtcOmO8AxHJFc9UczC\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/leases/lookup"
											},
											"response": []
										},
										{
											"name": "Revoke Lease",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/leases/revoke/terraform/creds/:role_name/:access_token",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"leases",
														"revoke",
														"terraform",
														"creds",
														":role_name",
														":access_token"
													],
													"variable": [
														{
															"key": "role_name",
															"value": "terraform-dynamic-access"
														},
														{
															"key": "access_token",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Revoke ALL Leases",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/leases/revoke-prefix/terraform/creds/:role_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"leases",
														"revoke-prefix",
														"terraform",
														"creds",
														":role_name"
													],
													"variable": [
														{
															"key": "role_name",
															"value": "terraform-dynamic-access"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Clean Up",
									"item": [
										{
											"name": "Delete Role for Terraform Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/terraform/role/terraform-dynamic-access"
											},
											"response": []
										},
										{
											"name": "Disable Terraform Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/terraform"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Organization and Team Based API Tokens",
							"item": [
								{
									"name": "Enable Engine and Configure",
									"item": [
										{
											"name": "Enable Terraform Engine",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"type\": \"terraform\",\r\n    \"description\": \"Terraform Cloud Dynamic API Keys\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/terraform-org"
											},
											"response": []
										},
										{
											"name": "Configure Terraform Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"address\": \"https://app.terraform.io\",\r\n  \"token\": \"{{Terraform_Cloud_User_Token}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/terraform-org/config"
											},
											"response": []
										},
										{
											"name": "Read Terraform Config",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": "{{VAULT_ADDRESS}}/v1/terraform-org/config"
											},
											"response": []
										}
									]
								},
								{
									"name": "Create Role",
									"item": [
										{
											"name": "Create Role for Terraform Temp Access",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"organization\": \"{{Terraform_Org_Name}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/terraform-org/role/:role_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"terraform-org",
														"role",
														":role_name"
													],
													"variable": [
														{
															"key": "role_name",
															"value": "terraform-org-access"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "List Roles",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "LIST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/terraform-org/role"
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Token",
									"item": [
										{
											"name": "Regen Organization API Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"organization\": \"{{Terraform_Org_Name}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/terraform-org/role/:role_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"terraform-org",
														"role",
														":role_name"
													],
													"variable": [
														{
															"key": "role_name",
															"value": "terraform-org-access"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "View Terraform Org Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.environment.set(\"Terraform_Org_Token\", jsonData.data.token);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/terraform-org/creds/:role_name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"terraform-org",
														"creds",
														":role_name"
													],
													"variable": [
														{
															"key": "role_name",
															"value": "terraform-org-access"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Clean Up",
									"item": [
										{
											"name": "Delete Role for Terraform Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/terraform/role/terraform-org-access"
											},
											"response": []
										},
										{
											"name": "Disable Terraform Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/mounts/terraform-org"
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Vault to Terraform Variable Updater",
					"item": [
						{
							"name": "V2T Variable Update - Key/Value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Postman Flow Specific Code\r",
											"//pm.environment.set('update_value', '{{body.data.data.code}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Terraform_Cloud_User_Token}}"
									}
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "update_value",
										"value": "{{body.data.data.code}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\":\"vars\",\r\n    \"attributes\": {\r\n      \"value\":\"{{update_value}}\",\r\n      \"description\":\"This has been updated as of {{currentdate}}\",\r\n      \"category\":\"terraform\",\r\n      \"hcl\":false\r\n    }\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://app.terraform.io/api/v2/workspaces/{{Terraform_WorkspaceID}}/vars/{{Terraform_VariableID}}"
							},
							"response": [
								{
									"name": "V2T Variable Update - Key/Value",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\":\"vars\",\r\n    \"attributes\": {\r\n      \"value\":\"{{update_value}}\",\r\n      \"description\":\"This has been updated as of {{currentdate}}\",\r\n      \"category\":\"terraform\",\r\n      \"hcl\":false\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://app.terraform.io/api/v2/workspaces/{{Terraform_WorkspaceID}}/vars/{{Terraform_VariableID}}"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 26 Aug 2022 04:32:37 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/vnd.api+json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "697"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "Etag",
											"value": "W/\"670c861e8717f74728c7678077f92c6a\""
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=63072000; includeSubDomains; preload"
										},
										{
											"key": "Tfp-Api-Version",
											"value": "2.5"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Vary",
											"value": "Accept, Origin"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "X-Ratelimit-Limit",
											"value": "30"
										},
										{
											"key": "X-Ratelimit-Remaining",
											"value": "29"
										},
										{
											"key": "X-Ratelimit-Reset",
											"value": "0.83"
										},
										{
											"key": "X-Request-Id",
											"value": "20fdaf0f-8f70-083a-8f6a-afe4349ee509"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"id\": \"var-MzPsnFV8SNmvJS8H\",\n        \"type\": \"vars\",\n        \"attributes\": {\n            \"key\": \"super_secret_vault_build_item\",\n            \"value\": \"{{body.data.data.code}}\",\n            \"sensitive\": false,\n            \"category\": \"terraform\",\n            \"hcl\": false,\n            \"created-at\": \"2022-08-26T04:21:30.068Z\",\n            \"description\": \"This has been updated as of 2022-08-26-12:32:37\"\n        },\n        \"relationships\": {\n            \"configurable\": {\n                \"data\": {\n                    \"id\": \"ws-85yrs2V4VxfkaYtp\",\n                    \"type\": \"workspaces\"\n                },\n                \"links\": {\n                    \"related\": \"/api/v2/organizations/bm_mi_lab/workspaces/postman-demo\"\n                }\n            },\n            \"workspace\": {\n                \"data\": {\n                    \"id\": \"ws-85yrs2V4VxfkaYtp\",\n                    \"type\": \"workspaces\"\n                },\n                \"links\": {\n                    \"related\": \"/api/v2/organizations/bm_mi_lab/workspaces/postman-demo\"\n                }\n            }\n        },\n        \"links\": {\n            \"self\": \"/api/v2/workspaces/ws-85yrs2V4VxfkaYtp/vars/var-MzPsnFV8SNmvJS8H\"\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "V2T Variable Update - Dynamic Database Username",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Postman Flow Specific Code\r",
											"pm.environment.set('update_value', '{{body.data.username}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Terraform_Cloud_User_Token}}"
									}
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\":\"vars\",\r\n    \"attributes\": {\r\n      \"value\":\"{{update_value}}\",\r\n      \"description\":\"This has been updated as of {{currentdate}}\",\r\n      \"category\":\"terraform\",\r\n      \"hcl\":false\r\n    }\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://app.terraform.io/api/v2/workspaces/{{Terraform_WorkspaceID}}/vars/{{Terraform_VariableID}}"
							},
							"response": []
						},
						{
							"name": "V2T Variable Update - Dynamic Database Password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Postman Flow Specific Code\r",
											"pm.environment.set('update_value', '{{body.data.password}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Terraform_Cloud_User_Token}}"
									}
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\":\"vars\",\r\n    \"attributes\": {\r\n      \"value\":\"{{update_value}}\",\r\n      \"description\":\"This has been updated as of {{currentdate}}\",\r\n      \"category\":\"terraform\",\r\n      \"hcl\":false,\r\n      \"sensitive\": true\r\n    }\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://app.terraform.io/api/v2/workspaces/{{Terraform_WorkspaceID}}/vars/{{Terraform_VariableID}}"
							},
							"response": []
						}
					],
					"description": "## About this folder set\n\nThese Send Requests are specifically used in a Postman flow which currently does not utilize global variables. Pre-request scripts are configured on each Send to parse data from other Use Case Requests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var moment = require('moment');",
									"",
									"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD-h:mm:ss\")));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Wrap/Unwrap Tool",
					"item": [
						{
							"name": "Wrap Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(200);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"VAULT_WRAP_TOKEN\", jsonData.wrap_info.token);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									},
									{
										"key": "X-Vault-Wrap-TTL",
										"value": "30",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"secure_data_string\": \"all you base are belong to us\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/wrapping/wrap"
							},
							"response": []
						},
						{
							"name": "Wrapping Lookup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(200);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"entity_id\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"token\": \"{{VAULT_WRAP_TOKEN}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/wrapping/lookup"
							},
							"response": []
						},
						{
							"name": "Unwrap Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(200);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"entity_id\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"token\": \"{{VAULT_WRAP_TOKEN}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/wrapping/unwrap"
							},
							"response": []
						}
					]
				},
				{
					"name": "Boundary Connect",
					"item": [
						{
							"name": "Create Boundary Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(204);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"boundary-controller\",\r\n    \"policy\": \"#Ref: https://github.com/hashicorp/learn-boundary-vault-quickstart/blob/main/boundary-controller-policy.hcl\\n\\npath \\\"auth/token/lookup-self\\\" {\\n  capabilities = [\\\"read\\\"]\\n}\\n\\npath \\\"auth/token/renew-self\\\" {\\n  capabilities = [\\\"update\\\"]\\n}\\n\\npath \\\"auth/token/revoke-self\\\" {\\n  capabilities = [\\\"update\\\"]\\n}\\n\\npath \\\"sys/leases/renew\\\" {\\n  capabilities = [\\\"update\\\"]\\n}\\n\\npath \\\"sys/leases/revoke\\\" {\\n  capabilities = [\\\"update\\\"]\\n}\\n\\npath \\\"sys/capabilities-self\\\" {\\n  capabilities = [\\\"update\\\"]\\n}\\n\\n# Access to database engines (all)\\npath \\\"db_postgres/creds/*\\\" {\\n  capabilities = [\\\"read\\\"]\\n}\\n\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/boundary-controller"
							},
							"response": []
						},
						{
							"name": "Create Boundary Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Execution Successful\", function () {\r",
											"\r",
											"    try {\r",
											"\r",
											"        pm.response.to.have.status(200);\r",
											"\r",
											"    } catch (e) {\r",
											"\r",
											"        console.log(e)\r",
											"\r",
											"        throw Error(e)\r",
											"\r",
											"    }\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Vault-Token",
										"value": "{{VAULT_TOKEN}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"policies\": [\"boundary-controller\"],\r\n  \"no-default-policy\": true,\r\n  \"meta\": {\r\n    \"usage\": \"Token for HCP Boundary\"\r\n  },\r\n  \"renewable\": true,\r\n  \"orphan\": true,\r\n  \"display_name\": \"Boundary HCP Token\",\r\n  \"no_parent\": true,\r\n  \"period\": \"90d\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{VAULT_ADDRESS}}/v1/auth/token/create"
							},
							"response": []
						}
					],
					"description": "This section will assist with the creation of a Vault policy for use with HCP Boundary. Please refer to [the following guide](https://developer.hashicorp.com/boundary/tutorials/access-management/hcp-vault-cred-brokering-quickstart#create-vault-token-for-boundary) for more information  \n\nNote that the Boundary policy is an all-in-one policy which is intended for testing, not fully production."
				},
				{
					"name": "Dynamic Provider Credentials for TFC",
					"item": [
						{
							"name": "JWT Authentication",
							"item": [
								{
									"name": "Enable Auth and Policy",
									"item": [
										{
											"name": "Enable JWT Authentication Engine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"path\": \"jwt-tfc\",\r\n    \"type\": \"jwt\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{VAULT_ADDRESS}}/v1/sys/auth/jwt-tfc"
											},
											"response": []
										},
										{
											"name": "Update JWT Authentication Config",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "id",
															"value": "jwt-tfc",
															"type": "text"
														},
														{
															"key": "oidc_discovery_url",
															"value": "https://app.terraform.io",
															"type": "text"
														},
														{
															"key": "bound_issuer",
															"value": "https://app.terraform.io",
															"type": "text"
														},
														{
															"key": "namespace_in_state",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": "{{VAULT_ADDRESS}}/v1/auth/jwt-tfc/config"
											},
											"response": []
										}
									]
								},
								{
									"name": "Dynamic Azure Credential Example",
									"item": [
										{
											"name": "Configure JWT Policy",
											"item": [
												{
													"name": "Create JWT Access Policy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"policy\":\"# Allow tokens to query themselves\\npath \\\"auth/token/lookup-self\\\" {\\n  capabilities = [\\\"read\\\"]\\n}\\n\\n# Allow tokens to renew themselves\\npath \\\"auth/token/renew-self\\\" {\\n    capabilities = [\\\"update\\\"]\\n}\\n\\n# Allow tokens to revoke themselves\\npath \\\"auth/token/revoke-self\\\" {\\n    capabilities = [\\\"update\\\"]\\n}\\n\\n# Configure the actual secrets the token should have access to\\npath \\\"azure/*\\\" {\\n  capabilities = [\\\"read\\\"]\\n}\\n\"}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{VAULT_ADDRESS}}/v1/sys/policies/acl/:policy_name",
															"host": [
																"{{VAULT_ADDRESS}}"
															],
															"path": [
																"v1",
																"sys",
																"policies",
																"acl",
																":policy_name"
															],
															"variable": [
																{
																	"key": "policy_name",
																	"value": "jwt_tfc_dynamic_creds"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Configure JWT Roles",
											"item": [
												{
													"name": "Configure JWT Role for Terraform Cloud",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}"
															}
														],
														"url": {
															"raw": "{{VAULT_ADDRESS}}/v1/auth/jwt-tfc/role/:role_name",
															"host": [
																"{{VAULT_ADDRESS}}"
															],
															"path": [
																"v1",
																"auth",
																"jwt-tfc",
																"role",
																":role_name"
															],
															"variable": [
																{
																	"key": "role_name",
																	"value": "jwt_tfc_dynamic_creds_role"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get JWT Role Config for Terraform Cloud",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(200);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{VAULT_ADDRESS}}/v1/auth/jwt-tfc/role/:role_name",
															"host": [
																"{{VAULT_ADDRESS}}"
															],
															"path": [
																"v1",
																"auth",
																"jwt-tfc",
																"role",
																":role_name"
															],
															"variable": [
																{
																	"key": "role_name",
																	"value": "jwt_tfc_dynamic_creds_role"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Secrets Sync",
					"item": [
						{
							"name": "Azure Key Vault",
							"item": [
								{
									"name": "Create Destination",
									"item": [
										{
											"name": "Create Azure Sync Destination",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});",
															"",
															"var template = `",
															"<div style=\"text-align:center\">",
															"    <h1>Error: {{response.errors}}</h1>",
															"    <img src=\"https://www.example.com/error-image.jpg\" alt=\"Error Image\" width=\"400\">",
															"</div>",
															"`;",
															"",
															"function constructVisualizerPayload() {",
															"    return {response: pm.response.json()}",
															"}",
															"",
															"pm.visualizer.set(template, constructVisualizerPayload());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"key_vault_uri\": \"{{AZURE_KEYVAULT_URI}}\",\r\n    \"subscription_id\": \"{{AZURE_SUBSCRIPTION_ID}}\",\r\n    \"tenant_id\": \"{{AZURE_TENANT_ID}}\",\r\n    \"client_id\": \"{{AZURE_CLIENT_ID}}\",\r\n    \"client_secret\": \"{{AZURE_CLIENT_SECRET}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/sync/destinations/:type/:name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"sync",
														"destinations",
														":type",
														":name"
													],
													"variable": [
														{
															"key": "type",
															"value": "azure-kv"
														},
														{
															"key": "name",
															"value": "vault-azure-sync"
														}
													]
												},
												"description": "[https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#create-update-azure-key-vault-destination](https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#create-update-azure-key-vault-destination)"
											},
											"response": []
										},
										{
											"name": "Read Azure Sync Destination",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});",
															"",
															"var template = `",
															"<div style=\"text-align:center\">",
															"    <h1>Error: {{response.errors}}</h1>",
															"    <img src=\"https://www.example.com/error-image.jpg\" alt=\"Error Image\" width=\"400\">",
															"</div>",
															"`;",
															"",
															"function constructVisualizerPayload() {",
															"    return {response: pm.response.json()}",
															"}",
															"",
															"pm.visualizer.set(template, constructVisualizerPayload());"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/sync/destinations/:type/:name",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"sync",
														"destinations",
														":type",
														":name"
													],
													"variable": [
														{
															"key": "type",
															"value": "azure-kv"
														},
														{
															"key": "name",
															"value": "vault-azure-sync"
														}
													]
												},
												"description": "[https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#read-destination](https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#read-destination)"
											},
											"response": []
										}
									]
								},
								{
									"name": "Create KVv2 Engine",
									"item": [
										{
											"name": "Enable Engine and Configure",
											"item": [
												{
													"name": "Enable Key Value Engine for Sync",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response time is less than 200ms\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"path\": \"kv2-akv-sync\",\r\n    \"type\": \"kv\",\r\n    \"config\": {},\r\n    \"options\": {\r\n        \"version\": 2\r\n    },\r\n    \"generate_signing_key\": true,\r\n    \"id\": \"kv2-akv-sync\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{VAULT_ADDRESS}}/v1/sys/mounts/:path",
															"host": [
																"{{VAULT_ADDRESS}}"
															],
															"path": [
																"v1",
																"sys",
																"mounts",
																":path"
															],
															"variable": [
																{
																	"key": "path",
																	"value": "kv2-akv-sync"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Add Key Value",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"data\": {\r\n        \"password\": \"hashicorp-vault-is-awesome\",\r\n        \"recovery_phrase\": \"akv sync for hashicorp vault\"\r\n    },\r\n    \"options\": {\r\n        \"cas\": 0\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{VAULT_ADDRESS}}/v1/:path/data/:secret",
															"host": [
																"{{VAULT_ADDRESS}}"
															],
															"path": [
																"v1",
																":path",
																"data",
																":secret"
															],
															"variable": [
																{
																	"key": "path",
																	"value": "kv2-akv-sync"
																},
																{
																	"key": "secret",
																	"value": "kv-secret-1"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Clean Up",
											"item": [
												{
													"name": "Disable Key Value Engine",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Execution Successful\", function () {\r",
																	"\r",
																	"    try {\r",
																	"\r",
																	"        pm.response.to.have.status(204);\r",
																	"\r",
																	"    } catch (e) {\r",
																	"\r",
																	"        console.log(e)\r",
																	"\r",
																	"        throw Error(e)\r",
																	"\r",
																	"    }\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-Vault-Token",
																"value": "{{VAULT_TOKEN}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{VAULT_ADDRESS}}/v1/sys/mounts/:path",
															"host": [
																"{{VAULT_ADDRESS}}"
															],
															"path": [
																"v1",
																"sys",
																"mounts",
																":path"
															],
															"variable": [
																{
																	"key": "path",
																	"value": "kv2-akv-sync"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									],
									"description": "[Reference Documentation](https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2)"
								},
								{
									"name": "Set KVv2 Assocation",
									"item": [
										{
											"name": "Create Azure Sync Destination",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});",
															"",
															"var template = `",
															"<div style=\"text-align:center\">",
															"    <h1>Error: {{response.errors}}</h1>",
															"    <img src=\"https://www.example.com/error-image.jpg\" alt=\"Error Image\" width=\"400\">",
															"</div>",
															"`;",
															"",
															"function constructVisualizerPayload() {",
															"    return {response: pm.response.json()}",
															"}",
															"",
															"pm.visualizer.set(template, constructVisualizerPayload());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mount\": \"kv2-akv-sync\",\r\n    \"secret_name\": \"kv-secret-1\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/sync/destinations/azure-kv/:name/associations/set",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"sync",
														"destinations",
														"azure-kv",
														":name",
														"associations",
														"set"
													],
													"variable": [
														{
															"key": "name",
															"value": "vault-azure-sync"
														}
													]
												},
												"description": "[https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#create-update-azure-key-vault-destination](https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#create-update-azure-key-vault-destination)"
											},
											"response": []
										},
										{
											"name": "Read Azure Sync Associations",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});",
															"",
															"var template = `",
															"<div style=\"text-align:center\">",
															"    <h1>Error: {{response.errors}}</h1>",
															"    <img src=\"https://www.example.com/error-image.jpg\" alt=\"Error Image\" width=\"400\">",
															"</div>",
															"`;",
															"",
															"function constructVisualizerPayload() {",
															"    return {response: pm.response.json()}",
															"}",
															"",
															"pm.visualizer.set(template, constructVisualizerPayload());"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/sync/destinations/:type/:name/associations",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"sync",
														"destinations",
														":type",
														":name",
														"associations"
													],
													"variable": [
														{
															"key": "type",
															"value": "azure-kv"
														},
														{
															"key": "name",
															"value": "vault-azure-sync"
														}
													]
												},
												"description": "[https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#read-associations](https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#read-associations)"
											},
											"response": []
										}
									]
								},
								{
									"name": "Remove Association",
									"item": [
										{
											"name": "Remove Assocation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execution Successful\", function () {\r",
															"\r",
															"    try {\r",
															"\r",
															"        pm.response.to.have.status(204);\r",
															"\r",
															"    } catch (e) {\r",
															"\r",
															"        console.log(e)\r",
															"\r",
															"        throw Error(e)\r",
															"\r",
															"    }\r",
															"\r",
															"});",
															"",
															"var template = `",
															"<div style=\"text-align:center\">",
															"    <h1>Error: {{response.errors}}</h1>",
															"    <img src=\"https://www.example.com/error-image.jpg\" alt=\"Error Image\" width=\"400\">",
															"</div>",
															"`;",
															"",
															"function constructVisualizerPayload() {",
															"    return {response: pm.response.json()}",
															"}",
															"",
															"pm.visualizer.set(template, constructVisualizerPayload());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Vault-Token",
														"value": "{{VAULT_TOKEN}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"mount\": \"kv2-akv-sync\",\r\n    \"secret_name\": \"kv-secret-1\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{VAULT_ADDRESS}}/v1/sys/sync/destinations/:type/:name/associations/remove",
													"host": [
														"{{VAULT_ADDRESS}}"
													],
													"path": [
														"v1",
														"sys",
														"sync",
														"destinations",
														":type",
														":name",
														"associations",
														"remove"
													],
													"variable": [
														{
															"key": "type",
															"value": "azure-kv"
														},
														{
															"key": "name",
															"value": "vault-azure-sync"
														}
													]
												},
												"description": "[https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#create-update-azure-key-vault-destination](https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#create-update-azure-key-vault-destination)"
											},
											"response": []
										}
									]
								},
								{
									"name": "List Destinations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});",
													"",
													"var template = `",
													"<div style=\"text-align:center\">",
													"    <h1>Error: {{response.errors}}</h1>",
													"    <img src=\"https://www.example.com/error-image.jpg\" alt=\"Error Image\" width=\"400\">",
													"</div>",
													"`;",
													"",
													"function constructVisualizerPayload() {",
													"    return {response: pm.response.json()}",
													"}",
													"",
													"pm.visualizer.set(template, constructVisualizerPayload());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "LIST",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{VAULT_ADDRESS}}/v1/sys/sync/destinations",
										"description": "[https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#list-destinations](https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#list-destinations)"
									},
									"response": []
								},
								{
									"name": "Delete Destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Execution Successful\", function () {\r",
													"\r",
													"    try {\r",
													"\r",
													"        pm.response.to.have.status(204);\r",
													"\r",
													"    } catch (e) {\r",
													"\r",
													"        console.log(e)\r",
													"\r",
													"        throw Error(e)\r",
													"\r",
													"    }\r",
													"\r",
													"});",
													"",
													"var template = `",
													"<div style=\"text-align:center\">",
													"    <h1>Error: {{response.errors}}</h1>",
													"    <img src=\"https://www.example.com/error-image.jpg\" alt=\"Error Image\" width=\"400\">",
													"</div>",
													"`;",
													"",
													"function constructVisualizerPayload() {",
													"    return {response: pm.response.json()}",
													"}",
													"",
													"pm.visualizer.set(template, constructVisualizerPayload());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Vault-Token",
												"value": "{{VAULT_TOKEN}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{VAULT_ADDRESS}}/v1/sys/sync/destinations/:type/:name",
											"host": [
												"{{VAULT_ADDRESS}}"
											],
											"path": [
												"v1",
												"sys",
												"sync",
												"destinations",
												":type",
												":name"
											],
											"variable": [
												{
													"key": "type",
													"value": "azure-kv"
												},
												{
													"key": "name",
													"value": "vault-azure-sync"
												}
											]
										},
										"description": "[https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#delete-destination](https://developer.hashicorp.com/vault/api-docs/system/secrets-sync#delete-destination)"
									},
									"response": []
								}
							]
						}
					],
					"description": "[https://developer.hashicorp.com/vault/docs/sync](https://developer.hashicorp.com/vault/docs/sync)"
				}
			],
			"description": "The subfolders will contain walkthrough API calls for demonstrational use."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//Declarative statement for setting a time variable to be used throughout all call is needed",
					"var moment = require('moment');",
					"",
					"pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD-h:mm\")));",
					"pm.environment.set('currentDate-raw', moment());",
					"",
					"",
					"//Declarative statement for specific namespaces and HCP Vault. HCP Vault requires the usage of a namespace header value",
					"var namespace = pm.environment.get(\"VAULT_NAMESPACE\")",
					"if (namespace !== null){",
					"    pm.request.headers.add({",
					"        key: \"X-Vault-Namespace\",",
					"        value: namespace",
					"    });",
					"}",
					"else (pm.request.headers.remove(\"X-Vault-Namespace\"))",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}